{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "host": "greengrass.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "AWS Greengrass seamlessly extends AWS onto physical devices so they can act locally on the data they generate, while still using the cloud for management, analytics, and durable storage. AWS Greengrass ensures your devices can respond quickly to local events and operate with intermittent connectivity. AWS Greengrass minimizes the cost of transmitting data to the cloud by allowing you to author AWS Lambda functions that execute locally.",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Greengrass",
    "version": "2017-06-07",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/greengrass-2017-06-07.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "greengrass"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/greengrass/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "header",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "header",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/greengrass/definition/cores": {
      "get": {
        "description": "Retrieves a list of core definitions.",
        "operationId": "ListCoreDefinitions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCoreDefinitionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCoreDefinitionsResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a core definition. You may provide the initial version of the core definition now or use ''CreateCoreDefinitionVersion'' at a later time. AWS Greengrass groups must each contain exactly one AWS Greengrass core.",
        "operationId": "CreateCoreDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCoreDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCoreDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/cores/{CoreDefinitionId}": {
      "delete": {
        "description": "Deletes a core definition.",
        "operationId": "DeleteCoreDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCoreDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "CoreDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteCoreDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a core definition version.",
        "operationId": "GetCoreDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCoreDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "CoreDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCoreDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a core definition.",
        "operationId": "UpdateCoreDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCoreDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "CoreDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCoreDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/cores/{CoreDefinitionId}/versions": {
      "get": {
        "description": "Lists the versions of a core definition.",
        "operationId": "ListCoreDefinitionVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCoreDefinitionVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "CoreDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCoreDefinitionVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a version of a core definition that has already been defined. AWS Greengrass groups must each contain exactly one AWS Greengrass core.",
        "operationId": "CreateCoreDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCoreDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "CoreDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCoreDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}": {
      "get": {
        "description": "Retrieves information about a core definition version.",
        "operationId": "GetCoreDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCoreDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "CoreDefinitionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "CoreDefinitionVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCoreDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/definition/devices": {
      "get": {
        "description": "Retrieves a list of device definitions.",
        "operationId": "ListDeviceDefinitions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeviceDefinitionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeviceDefinitionsResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a device definition. You may provide the initial version of the device definition now or use ''CreateDeviceDefinitionVersion'' at a later time.",
        "operationId": "CreateDeviceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeviceDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDeviceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/devices/{DeviceDefinitionId}": {
      "delete": {
        "description": "Deletes a device definition.",
        "operationId": "DeleteDeviceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDeviceDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "DeviceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDeviceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a device definition.",
        "operationId": "GetDeviceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeviceDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "DeviceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeviceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a device definition.",
        "operationId": "UpdateDeviceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDeviceDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "DeviceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDeviceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/devices/{DeviceDefinitionId}/versions": {
      "get": {
        "description": "Lists the versions of a device definition.",
        "operationId": "ListDeviceDefinitionVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeviceDefinitionVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "DeviceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeviceDefinitionVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a version of a device definition that has already been defined.",
        "operationId": "CreateDeviceDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeviceDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "DeviceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDeviceDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}": {
      "get": {
        "description": "Retrieves information about a device definition version.",
        "operationId": "GetDeviceDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeviceDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "DeviceDefinitionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "DeviceDefinitionVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeviceDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/definition/functions": {
      "get": {
        "description": "Retrieves a list of Lambda function definitions.",
        "operationId": "ListFunctionDefinitions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListFunctionDefinitionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFunctionDefinitionsResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a Lambda function definition which contains a list of Lambda functions and their configurations to be used in a group. You can create an initial version of the definition by providing a list of Lambda functions and their configurations now, or use ''CreateFunctionDefinitionVersion'' later.",
        "operationId": "CreateFunctionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFunctionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateFunctionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/functions/{FunctionDefinitionId}": {
      "delete": {
        "description": "Deletes a Lambda function definition.",
        "operationId": "DeleteFunctionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteFunctionDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteFunctionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a Lambda function definition, including its creation time and latest version.",
        "operationId": "GetFunctionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetFunctionDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFunctionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a Lambda function definition.",
        "operationId": "UpdateFunctionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFunctionDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateFunctionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/functions/{FunctionDefinitionId}/versions": {
      "get": {
        "description": "Lists the versions of a Lambda function definition.",
        "operationId": "ListFunctionDefinitionVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListFunctionDefinitionVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFunctionDefinitionVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a version of a Lambda function definition that has already been defined.",
        "operationId": "CreateFunctionDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFunctionDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateFunctionDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}": {
      "get": {
        "description": "Retrieves information about a Lambda function definition version, including which Lambda functions are included in the version and their configurations.",
        "operationId": "GetFunctionDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetFunctionDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionDefinitionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "FunctionDefinitionVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFunctionDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/definition/loggers": {
      "get": {
        "description": "Retrieves a list of logger definitions.",
        "operationId": "ListLoggerDefinitions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLoggerDefinitionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLoggerDefinitionsResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a logger definition. You may provide the initial version of the logger definition now or use ''CreateLoggerDefinitionVersion'' at a later time.",
        "operationId": "CreateLoggerDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLoggerDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateLoggerDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/loggers/{LoggerDefinitionId}": {
      "delete": {
        "description": "Deletes a logger definition.",
        "operationId": "DeleteLoggerDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteLoggerDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "LoggerDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteLoggerDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a logger definition.",
        "operationId": "GetLoggerDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLoggerDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "LoggerDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLoggerDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a logger definition.",
        "operationId": "UpdateLoggerDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLoggerDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "LoggerDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateLoggerDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/loggers/{LoggerDefinitionId}/versions": {
      "get": {
        "description": "Lists the versions of a logger definition.",
        "operationId": "ListLoggerDefinitionVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLoggerDefinitionVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "LoggerDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLoggerDefinitionVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a version of a logger definition that has already been defined.",
        "operationId": "CreateLoggerDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLoggerDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "LoggerDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateLoggerDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}": {
      "get": {
        "description": "Retrieves information about a logger definition version.",
        "operationId": "GetLoggerDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLoggerDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "LoggerDefinitionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "LoggerDefinitionVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLoggerDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/definition/resources": {
      "get": {
        "description": "Retrieves a list of resource definitions.",
        "operationId": "ListResourceDefinitions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceDefinitionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceDefinitionsResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a resource definition which contains a list of resources to be used in a group. You can create an initial version of the definition by providing a list of resources now, or use ''CreateResourceDefinitionVersion'' later.",
        "operationId": "CreateResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResourceDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateResourceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/resources/{ResourceDefinitionId}": {
      "delete": {
        "description": "Deletes a resource definition.",
        "operationId": "DeleteResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourceDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "ResourceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteResourceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a resource definition, including its creation time and latest version.",
        "operationId": "GetResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetResourceDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "ResourceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetResourceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a resource definition.",
        "operationId": "UpdateResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateResourceDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "ResourceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateResourceDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/resources/{ResourceDefinitionId}/versions": {
      "get": {
        "description": "Lists the versions of a resource definition.",
        "operationId": "ListResourceDefinitionVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceDefinitionVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "ResourceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceDefinitionVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a version of a resource definition that has already been defined.",
        "operationId": "CreateResourceDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResourceDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "ResourceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateResourceDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}": {
      "get": {
        "description": "Retrieves information about a resource definition version, including which resources are included in the version.",
        "operationId": "GetResourceDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetResourceDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "ResourceDefinitionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ResourceDefinitionVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetResourceDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/definition/subscriptions": {
      "get": {
        "description": "Retrieves a list of subscription definitions.",
        "operationId": "ListSubscriptionDefinitions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSubscriptionDefinitionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSubscriptionDefinitionsResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a subscription definition. You may provide the initial version of the subscription definition now or use ''CreateSubscriptionDefinitionVersion'' at a later time.",
        "operationId": "CreateSubscriptionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}": {
      "delete": {
        "description": "Deletes a subscription definition.",
        "operationId": "DeleteSubscriptionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSubscriptionDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "SubscriptionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSubscriptionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a subscription definition.",
        "operationId": "GetSubscriptionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSubscriptionDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "SubscriptionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSubscriptionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a subscription definition.",
        "operationId": "UpdateSubscriptionDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSubscriptionDefinitionRequest"
            }
          },
          {
            "in": "path",
            "name": "SubscriptionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateSubscriptionDefinitionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions": {
      "get": {
        "description": "Lists the versions of a subscription definition.",
        "operationId": "ListSubscriptionDefinitionVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSubscriptionDefinitionVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "SubscriptionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSubscriptionDefinitionVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a version of a subscription definition which has already been defined.",
        "operationId": "CreateSubscriptionDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "SubscriptionDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}": {
      "get": {
        "description": "Retrieves information about a subscription definition version.",
        "operationId": "GetSubscriptionDefinitionVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSubscriptionDefinitionVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "SubscriptionDefinitionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SubscriptionDefinitionVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSubscriptionDefinitionVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/groups": {
      "get": {
        "description": "Retrieves a list of groups.",
        "operationId": "ListGroups",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupsResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a group. You may provide the initial version of the group or use ''CreateGroupVersion'' at a later time.",
        "operationId": "CreateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGroupResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}": {
      "delete": {
        "description": "Deletes a group.",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGroupResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a group.",
        "operationId": "GetGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetGroupResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a group.",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateGroupResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}/certificateauthorities": {
      "get": {
        "description": "Retrieves the current CAs for a group.",
        "operationId": "ListGroupCertificateAuthorities",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListGroupCertificateAuthoritiesRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupCertificateAuthoritiesResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a CA for the group. If a CA already exists, it will rotate the existing CA.",
        "operationId": "CreateGroupCertificateAuthority",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupCertificateAuthorityRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGroupCertificateAuthorityResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry": {
      "get": {
        "description": "Retrieves the current configuration for the CA used by the group.",
        "operationId": "GetGroupCertificateConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetGroupCertificateConfigurationRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetGroupCertificateConfigurationResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates the Certificate expiry time for a group.",
        "operationId": "UpdateGroupCertificateConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateGroupCertificateConfigurationRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateGroupCertificateConfigurationResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}": {
      "get": {
        "description": "Retreives the CA associated with a group. Returns the public key of the CA.",
        "operationId": "GetGroupCertificateAuthority",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetGroupCertificateAuthorityRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "CertificateAuthorityId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetGroupCertificateAuthorityResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/groups/{GroupId}/deployments": {
      "get": {
        "description": "Returns a history of deployments for the group.",
        "operationId": "ListDeployments",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeploymentsRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeploymentsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a deployment.",
        "operationId": "CreateDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeploymentRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDeploymentResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}/deployments/$reset": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Resets a group's deployments.",
        "operationId": "ResetDeployments",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetDeploymentsRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResetDeploymentsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status": {
      "get": {
        "description": "Returns the status of a deployment.",
        "operationId": "GetDeploymentStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentStatusRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "DeploymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeploymentStatusResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/groups/{GroupId}/role": {
      "delete": {
        "description": "Disassociates the role from a group.",
        "operationId": "DisassociateRoleFromGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociateRoleFromGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateRoleFromGroupResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the role associated with a particular group.",
        "operationId": "GetAssociatedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAssociatedRoleRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAssociatedRoleResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Associates a role with a group. Your AWS Greengrass core will use the role to access AWS cloud services. The role's permissions should allow Greengrass core Lambda functions to perform actions against the cloud.",
        "operationId": "AssociateRoleToGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateRoleToGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateRoleToGroupResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}/versions": {
      "get": {
        "description": "Lists the versions of a group.",
        "operationId": "ListGroupVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListGroupVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a version of a group which has already been defined.",
        "operationId": "CreateGroupVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGroupVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      }
    },
    "/greengrass/groups/{GroupId}/versions/{GroupVersionId}": {
      "get": {
        "description": "Retrieves information about a group version.",
        "operationId": "GetGroupVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetGroupVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "GroupVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetGroupVersionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/greengrass/servicerole": {
      "delete": {
        "description": "Disassociates the service role from your account. Without a service role, deployments will not work.",
        "operationId": "DisassociateServiceRoleFromAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociateServiceRoleFromAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateServiceRoleFromAccountResponse"
            }
          },
          "480": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the service role that is attached to your account.",
        "operationId": "GetServiceRoleForAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetServiceRoleForAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetServiceRoleForAccountResponse"
            }
          },
          "480": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Associates a role with your account. AWS Greengrass will use the role to access your Lambda functions and AWS IoT resources. This is necessary for deployments to succeed. The role must have at least minimum permissions in the policy ''AWSGreengrassResourceAccessRolePolicy''.",
        "operationId": "AssociateServiceRoleToAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateServiceRoleToAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateServiceRoleToAccountResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      }
    },
    "/greengrass/things/{ThingName}/connectivityInfo": {
      "get": {
        "description": "Retrieves the connectivity information for a core.",
        "operationId": "GetConnectivityInfo",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConnectivityInfoRequest"
            }
          },
          {
            "in": "path",
            "name": "ThingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConnectivityInfoResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.",
        "operationId": "UpdateConnectivityInfo",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConnectivityInfoRequest"
            }
          },
          {
            "in": "path",
            "name": "ThingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateConnectivityInfoResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      }
    },
    "/greengrass/updates": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a software update for a core or group of cores (specified as an IoT thing group.) Use this to update the OTA Agent as well as the Greengrass core software. It makes use of the IoT Jobs feature which provides additional commands to manage a Greengrass core software update job.",
        "operationId": "CreateSoftwareUpdateJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSoftwareUpdateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSoftwareUpdateJobResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AssociateRoleToGroupRequest": {
      "properties": {
        "RoleArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the role you wish to associate with this group."
        }
      },
      "type": "object"
    },
    "AssociateRoleToGroupResponse": {
      "properties": {
        "AssociatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the role ARN was associated with the group."
        }
      },
      "type": "object"
    },
    "AssociateServiceRoleToAccountRequest": {
      "properties": {
        "RoleArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the service role you wish to associate with your account."
        }
      },
      "type": "object"
    },
    "AssociateServiceRoleToAccountResponse": {
      "properties": {
        "AssociatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time when the service role was associated with the account."
        }
      },
      "type": "object"
    },
    "BadRequestException": {
      "description": "General error information.",
      "properties": {
        "ErrorDetails": {
          "$ref": "#/definitions/ErrorDetails",
          "description": "Details about the error."
        },
        "Message": {
          "$ref": "#/definitions/__string",
          "description": "A message containing information about the error."
        }
      },
      "type": "object"
    },
    "ConnectivityInfo": {
      "description": "Information about a Greengrass core's connectivity.",
      "properties": {
        "HostAddress": {
          "$ref": "#/definitions/__string",
          "description": "The endpoint for the Greengrass core. Can be an IP address or DNS."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the connectivity information."
        },
        "Metadata": {
          "$ref": "#/definitions/__string",
          "description": "Metadata for this endpoint."
        },
        "PortNumber": {
          "$ref": "#/definitions/__integer",
          "description": "The port of the Greengrass core. Usually 8883."
        }
      },
      "type": "object"
    },
    "Core": {
      "description": "Information about a core.",
      "properties": {
        "CertificateArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the certificate associated with the core."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the core."
        },
        "SyncShadow": {
          "$ref": "#/definitions/__boolean",
          "description": "If true, the core's local shadow is automatically synced with the cloud."
        },
        "ThingArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the thing which is the core."
        }
      },
      "type": "object"
    },
    "CoreDefinitionVersion": {
      "description": "Information about a core definition version.",
      "properties": {
        "Cores": {
          "$ref": "#/definitions/__listOfCore",
          "description": "A list of cores in the core definition version."
        }
      },
      "type": "object"
    },
    "CreateCoreDefinitionRequest": {
      "description": "Information needed to create a core definition.",
      "properties": {
        "InitialVersion": {
          "$ref": "#/definitions/CoreDefinitionVersion",
          "description": "Information about the initial version of the core definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the core definition."
        }
      },
      "type": "object"
    },
    "CreateCoreDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "CreateCoreDefinitionVersionRequest": {
      "properties": {
        "Cores": {
          "$ref": "#/definitions/__listOfCore",
          "description": "A list of cores in the core definition version."
        }
      },
      "type": "object"
    },
    "CreateCoreDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "CreateDeploymentRequest": {
      "properties": {
        "DeploymentId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the deployment if you wish to redeploy a previous deployment."
        },
        "DeploymentType": {
          "$ref": "#/definitions/DeploymentType",
          "description": "The type of deployment. When used in ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid."
        },
        "GroupVersionId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the group version to be deployed."
        }
      },
      "type": "object"
    },
    "CreateDeploymentResponse": {
      "properties": {
        "DeploymentArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the deployment."
        },
        "DeploymentId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the deployment."
        }
      },
      "type": "object"
    },
    "CreateDeviceDefinitionRequest": {
      "properties": {
        "InitialVersion": {
          "$ref": "#/definitions/DeviceDefinitionVersion",
          "description": "Information about the initial version of the device definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the device definition."
        }
      },
      "type": "object"
    },
    "CreateDeviceDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "CreateDeviceDefinitionVersionRequest": {
      "properties": {
        "Devices": {
          "$ref": "#/definitions/__listOfDevice",
          "description": "A list of devices in the definition version."
        }
      },
      "type": "object"
    },
    "CreateDeviceDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "CreateFunctionDefinitionRequest": {
      "properties": {
        "InitialVersion": {
          "$ref": "#/definitions/FunctionDefinitionVersion",
          "description": "Information about the initial version of the function definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the function definition."
        }
      },
      "type": "object"
    },
    "CreateFunctionDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "CreateFunctionDefinitionVersionRequest": {
      "description": "Information needed to create a function definition version.",
      "properties": {
        "Functions": {
          "$ref": "#/definitions/__listOfFunction",
          "description": "A list of Lambda functions in this function definition version."
        }
      },
      "type": "object"
    },
    "CreateFunctionDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "CreateGroupCertificateAuthorityRequest": {
      "properties": {},
      "type": "object"
    },
    "CreateGroupCertificateAuthorityResponse": {
      "properties": {
        "GroupCertificateAuthorityArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the group certificate authority."
        }
      },
      "type": "object"
    },
    "CreateGroupRequest": {
      "properties": {
        "InitialVersion": {
          "$ref": "#/definitions/GroupVersion",
          "description": "Information about the initial version of the group."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the group."
        }
      },
      "type": "object"
    },
    "CreateGroupResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "CreateGroupVersionRequest": {
      "properties": {
        "CoreDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the core definition version for this group."
        },
        "DeviceDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the device definition version for this group."
        },
        "FunctionDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the function definition version for this group."
        },
        "LoggerDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the logger definition version for this group."
        },
        "ResourceDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The resource definition version ARN for this group."
        },
        "SubscriptionDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the subscription definition version for this group."
        }
      },
      "type": "object"
    },
    "CreateGroupVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "CreateLoggerDefinitionRequest": {
      "properties": {
        "InitialVersion": {
          "$ref": "#/definitions/LoggerDefinitionVersion",
          "description": "Information about the initial version of the logger definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the logger definition."
        }
      },
      "type": "object"
    },
    "CreateLoggerDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "CreateLoggerDefinitionVersionRequest": {
      "properties": {
        "Loggers": {
          "$ref": "#/definitions/__listOfLogger",
          "description": "A list of loggers."
        }
      },
      "type": "object"
    },
    "CreateLoggerDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "CreateResourceDefinitionRequest": {
      "properties": {
        "InitialVersion": {
          "$ref": "#/definitions/ResourceDefinitionVersion",
          "description": "Information about the initial version of the resource definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the resource definition."
        }
      },
      "type": "object"
    },
    "CreateResourceDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "CreateResourceDefinitionVersionRequest": {
      "properties": {
        "Resources": {
          "$ref": "#/definitions/__listOfResource",
          "description": "A list of resources."
        }
      },
      "type": "object"
    },
    "CreateResourceDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "CreateSoftwareUpdateJobRequest": {
      "properties": {
        "S3UrlSignerRole": {
          "$ref": "#/definitions/S3UrlSignerRole"
        },
        "SoftwareToUpdate": {
          "$ref": "#/definitions/SoftwareToUpdate"
        },
        "UpdateAgentLogLevel": {
          "$ref": "#/definitions/UpdateAgentLogLevel"
        },
        "UpdateTargets": {
          "$ref": "#/definitions/UpdateTargets"
        },
        "UpdateTargetsArchitecture": {
          "$ref": "#/definitions/UpdateTargetsArchitecture"
        },
        "UpdateTargetsOperatingSystem": {
          "$ref": "#/definitions/UpdateTargetsOperatingSystem"
        }
      },
      "type": "object"
    },
    "CreateSoftwareUpdateJobResponse": {
      "properties": {
        "IotJobArn": {
          "$ref": "#/definitions/__string",
          "description": "The IoT Job ARN corresponding to this update."
        },
        "IotJobId": {
          "$ref": "#/definitions/__string",
          "description": "The IoT Job Id corresponding to this update."
        }
      },
      "type": "object"
    },
    "CreateSubscriptionDefinitionRequest": {
      "properties": {
        "InitialVersion": {
          "$ref": "#/definitions/SubscriptionDefinitionVersion",
          "description": "Information about the initial version of the subscription definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the subscription definition."
        }
      },
      "type": "object"
    },
    "CreateSubscriptionDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "CreateSubscriptionDefinitionVersionRequest": {
      "properties": {
        "Subscriptions": {
          "$ref": "#/definitions/__listOfSubscription",
          "description": "A list of subscriptions."
        }
      },
      "type": "object"
    },
    "CreateSubscriptionDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "DefinitionInformation": {
      "description": "Information about a definition.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "DeleteCoreDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteCoreDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteDeviceDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteDeviceDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteFunctionDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteFunctionDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteLoggerDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteLoggerDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteResourceDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteResourceDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteSubscriptionDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteSubscriptionDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "Deployment": {
      "description": "Information about a deployment.",
      "properties": {
        "CreatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the deployment was created."
        },
        "DeploymentArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the deployment."
        },
        "DeploymentId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the deployment."
        },
        "DeploymentType": {
          "$ref": "#/definitions/DeploymentType",
          "description": "The type of the deployment."
        },
        "GroupArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the group for this deployment."
        }
      },
      "type": "object"
    },
    "DeploymentType": {
      "enum": [
        "NewDeployment",
        "Redeployment",
        "ResetDeployment",
        "ForceResetDeployment"
      ],
      "type": "string"
    },
    "Deployments": {
      "items": {
        "$ref": "#/definitions/Deployment"
      },
      "type": "array"
    },
    "Device": {
      "description": "Information about a device.",
      "properties": {
        "CertificateArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the certificate associated with the device."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the device."
        },
        "SyncShadow": {
          "$ref": "#/definitions/__boolean",
          "description": "If true, the device's local shadow will be automatically synced with the cloud."
        },
        "ThingArn": {
          "$ref": "#/definitions/__string",
          "description": "The thing ARN of the device."
        }
      },
      "type": "object"
    },
    "DeviceDefinitionVersion": {
      "description": "Information about a device definition version.",
      "properties": {
        "Devices": {
          "$ref": "#/definitions/__listOfDevice",
          "description": "A list of devices in the definition version."
        }
      },
      "type": "object"
    },
    "DisassociateRoleFromGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "DisassociateRoleFromGroupResponse": {
      "properties": {
        "DisassociatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the role was disassociated from the group."
        }
      },
      "type": "object"
    },
    "DisassociateServiceRoleFromAccountRequest": {
      "properties": {},
      "type": "object"
    },
    "DisassociateServiceRoleFromAccountResponse": {
      "properties": {
        "DisassociatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time when the service role was disassociated from the account."
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "Empty",
      "properties": {},
      "type": "object"
    },
    "EncodingType": {
      "enum": [
        "binary",
        "json"
      ],
      "type": "string"
    },
    "ErrorDetail": {
      "description": "Details about the error.",
      "properties": {
        "DetailedErrorCode": {
          "$ref": "#/definitions/__string",
          "description": "A detailed error code."
        },
        "DetailedErrorMessage": {
          "$ref": "#/definitions/__string",
          "description": "A detailed error message."
        }
      },
      "type": "object"
    },
    "ErrorDetails": {
      "description": "A list of error details.",
      "items": {
        "$ref": "#/definitions/ErrorDetail"
      },
      "type": "array"
    },
    "Function": {
      "description": "Information about a Lambda function.",
      "properties": {
        "FunctionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the Lambda function."
        },
        "FunctionConfiguration": {
          "$ref": "#/definitions/FunctionConfiguration",
          "description": "The configuration of the Lambda function."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Lambda function."
        }
      },
      "type": "object"
    },
    "FunctionConfiguration": {
      "description": "The configuration of the Lambda function.",
      "properties": {
        "EncodingType": {
          "$ref": "#/definitions/EncodingType",
          "description": "The expected encoding type of the input payload for the function. The default is ''json''."
        },
        "Environment": {
          "$ref": "#/definitions/FunctionConfigurationEnvironment",
          "description": "The environment configuration of the function."
        },
        "ExecArgs": {
          "$ref": "#/definitions/__string",
          "description": "The execution arguments."
        },
        "Executable": {
          "$ref": "#/definitions/__string",
          "description": "The name of the function executable."
        },
        "MemorySize": {
          "$ref": "#/definitions/__integer",
          "description": "The memory size, in KB, which the function requires."
        },
        "Pinned": {
          "$ref": "#/definitions/__boolean",
          "description": "True if the function is pinned. Pinned means the function is long-lived and starts when the core starts."
        },
        "Timeout": {
          "$ref": "#/definitions/__integer",
          "description": "The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned lambdas for each request."
        }
      },
      "type": "object"
    },
    "FunctionConfigurationEnvironment": {
      "description": "The environment configuration of the function.",
      "properties": {
        "AccessSysfs": {
          "$ref": "#/definitions/__boolean",
          "description": "If true, the Lambda function is allowed to access the host's /sys folder. Use this when the Lambda function needs to read device information from /sys."
        },
        "ResourceAccessPolicies": {
          "$ref": "#/definitions/__listOfResourceAccessPolicy",
          "description": "A list of the resources, with their permissions, to which the Lambda function will be granted access. A Lambda function can have at most 10 resources."
        },
        "Variables": {
          "$ref": "#/definitions/__mapOf__string",
          "description": "Environment variables for the Lambda function's configuration."
        }
      },
      "type": "object"
    },
    "FunctionDefinitionVersion": {
      "description": "Information about a function definition version.",
      "properties": {
        "Functions": {
          "$ref": "#/definitions/__listOfFunction",
          "description": "A list of Lambda functions in this function definition version."
        }
      },
      "type": "object"
    },
    "GeneralError": {
      "description": "General error information.",
      "properties": {
        "ErrorDetails": {
          "$ref": "#/definitions/ErrorDetails",
          "description": "Details about the error."
        },
        "Message": {
          "$ref": "#/definitions/__string",
          "description": "A message containing information about the error."
        }
      },
      "type": "object"
    },
    "GetAssociatedRoleRequest": {
      "properties": {},
      "type": "object"
    },
    "GetAssociatedRoleResponse": {
      "properties": {
        "AssociatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time when the role was associated with the group."
        },
        "RoleArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the role that is associated with the group."
        }
      },
      "type": "object"
    },
    "GetConnectivityInfoRequest": {
      "properties": {},
      "type": "object"
    },
    "GetConnectivityInfoResponse": {
      "properties": {
        "ConnectivityInfo": {
          "$ref": "#/definitions/__listOfConnectivityInfo",
          "description": "Connectivity info list."
        },
        "Message": {
          "$ref": "#/definitions/__string",
          "description": "A message about the connectivity info request."
        }
      },
      "type": "object"
    },
    "GetCoreDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetCoreDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "GetCoreDefinitionVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetCoreDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the core definition version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the core definition version was created."
        },
        "Definition": {
          "$ref": "#/definitions/CoreDefinitionVersion",
          "description": "Information about the core definition version."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the core definition version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The version of the core definition version."
        }
      },
      "type": "object"
    },
    "GetDeploymentStatusRequest": {
      "properties": {},
      "type": "object"
    },
    "GetDeploymentStatusResponse": {
      "properties": {
        "DeploymentStatus": {
          "$ref": "#/definitions/__string",
          "description": "The status of the deployment."
        },
        "DeploymentType": {
          "$ref": "#/definitions/DeploymentType",
          "description": "The type of the deployment."
        },
        "ErrorDetails": {
          "$ref": "#/definitions/ErrorDetails",
          "description": "Error details"
        },
        "ErrorMessage": {
          "$ref": "#/definitions/__string",
          "description": "Error message"
        },
        "UpdatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the deployment status was updated."
        }
      },
      "type": "object"
    },
    "GetDeviceDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetDeviceDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "GetDeviceDefinitionVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetDeviceDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the device definition version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the device definition version was created."
        },
        "Definition": {
          "$ref": "#/definitions/DeviceDefinitionVersion",
          "description": "Information about the device definition version."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the device definition version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The version of the device definition version."
        }
      },
      "type": "object"
    },
    "GetFunctionDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetFunctionDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "GetFunctionDefinitionVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetFunctionDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the function definition version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the function definition version was created."
        },
        "Definition": {
          "$ref": "#/definitions/FunctionDefinitionVersion",
          "description": "Information on the definition."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the function definition version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The version of the function definition version."
        }
      },
      "type": "object"
    },
    "GetGroupCertificateAuthorityRequest": {
      "properties": {},
      "type": "object"
    },
    "GetGroupCertificateAuthorityResponse": {
      "properties": {
        "GroupCertificateAuthorityArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the certificate authority for the group."
        },
        "GroupCertificateAuthorityId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the certificate authority for the group."
        },
        "PemEncodedCertificate": {
          "$ref": "#/definitions/__string",
          "description": "The PEM encoded certificate for the group."
        }
      },
      "type": "object"
    },
    "GetGroupCertificateConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetGroupCertificateConfigurationResponse": {
      "properties": {
        "CertificateAuthorityExpiryInMilliseconds": {
          "$ref": "#/definitions/__string",
          "description": "The amount of time remaining before the certificate authority expires, in milliseconds."
        },
        "CertificateExpiryInMilliseconds": {
          "$ref": "#/definitions/__string",
          "description": "The amount of time remaining before the certificate expires, in milliseconds."
        },
        "GroupId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the group certificate configuration."
        }
      },
      "type": "object"
    },
    "GetGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "GetGroupResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "GetGroupVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetGroupVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the group version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the group version was created."
        },
        "Definition": {
          "$ref": "#/definitions/GroupVersion",
          "description": "Information about the group version definition."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the group version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID for the version of the group."
        }
      },
      "type": "object"
    },
    "GetLoggerDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetLoggerDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "GetLoggerDefinitionVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetLoggerDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the logger definition version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the logger definition version was created."
        },
        "Definition": {
          "$ref": "#/definitions/LoggerDefinitionVersion",
          "description": "Information about the logger definition version."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the logger definition version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The version of the logger definition version."
        }
      },
      "type": "object"
    },
    "GetResourceDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetResourceDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "GetResourceDefinitionVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetResourceDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "Arn of the resource definition version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the resource definition version was created."
        },
        "Definition": {
          "$ref": "#/definitions/ResourceDefinitionVersion",
          "description": "Information about the definition."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the resource definition version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The version of the resource definition version."
        }
      },
      "type": "object"
    },
    "GetServiceRoleForAccountRequest": {
      "properties": {},
      "type": "object"
    },
    "GetServiceRoleForAccountResponse": {
      "properties": {
        "AssociatedAt": {
          "$ref": "#/definitions/__string",
          "description": "The time when the service role was associated with the account."
        },
        "RoleArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the role which is associated with the account."
        }
      },
      "type": "object"
    },
    "GetSubscriptionDefinitionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetSubscriptionDefinitionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the definition."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the definition."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the definition was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the definition."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the definition."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "GetSubscriptionDefinitionVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetSubscriptionDefinitionVersionResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the subscription definition version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the subscription definition version was created."
        },
        "Definition": {
          "$ref": "#/definitions/SubscriptionDefinitionVersion",
          "description": "Information about the subscription definition version."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the subscription definition version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The version of the subscription definition version."
        }
      },
      "type": "object"
    },
    "GroupCertificateAuthorityProperties": {
      "description": "Information about a certificate authority for a group.",
      "properties": {
        "GroupCertificateAuthorityArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the certificate authority for the group."
        },
        "GroupCertificateAuthorityId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the certificate authority for the group."
        }
      },
      "type": "object"
    },
    "GroupCertificateConfiguration": {
      "description": "Information about a group certificate configuration.",
      "properties": {
        "CertificateAuthorityExpiryInMilliseconds": {
          "$ref": "#/definitions/__string",
          "description": "The amount of time remaining before the certificate authority expires, in milliseconds."
        },
        "CertificateExpiryInMilliseconds": {
          "$ref": "#/definitions/__string",
          "description": "The amount of time remaining before the certificate expires, in milliseconds."
        },
        "GroupId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the group certificate configuration."
        }
      },
      "type": "object"
    },
    "GroupInformation": {
      "description": "Information about a group.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the group."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the group was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the group."
        },
        "LastUpdatedTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the group was last updated."
        },
        "LatestVersion": {
          "$ref": "#/definitions/__string",
          "description": "The latest version of the group."
        },
        "LatestVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the latest version of the group."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the group."
        }
      },
      "type": "object"
    },
    "GroupOwnerSetting": {
      "description": "Group owner related settings for local resources.",
      "properties": {
        "AutoAddGroupOwner": {
          "$ref": "#/definitions/__boolean",
          "description": "If true, GreenGrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group."
        },
        "GroupOwner": {
          "$ref": "#/definitions/__string",
          "description": "The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional."
        }
      },
      "type": "object"
    },
    "GroupVersion": {
      "description": "Information about a group version.",
      "properties": {
        "CoreDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the core definition version for this group."
        },
        "DeviceDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the device definition version for this group."
        },
        "FunctionDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the function definition version for this group."
        },
        "LoggerDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the logger definition version for this group."
        },
        "ResourceDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The resource definition version ARN for this group."
        },
        "SubscriptionDefinitionVersionArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the subscription definition version for this group."
        }
      },
      "type": "object"
    },
    "InternalServerErrorException": {
      "description": "General error information.",
      "properties": {
        "ErrorDetails": {
          "$ref": "#/definitions/ErrorDetails",
          "description": "Details about the error."
        },
        "Message": {
          "$ref": "#/definitions/__string",
          "description": "A message containing information about the error."
        }
      },
      "type": "object"
    },
    "ListCoreDefinitionVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListCoreDefinitionVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "ListCoreDefinitionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListCoreDefinitionsResponse": {
      "properties": {
        "Definitions": {
          "$ref": "#/definitions/__listOfDefinitionInformation",
          "description": "Information about a definition."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListDefinitionsResponse": {
      "description": "A list of definitions.",
      "properties": {
        "Definitions": {
          "$ref": "#/definitions/__listOfDefinitionInformation",
          "description": "Information about a definition."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListDeploymentsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListDeploymentsResponse": {
      "properties": {
        "Deployments": {
          "$ref": "#/definitions/Deployments",
          "description": "A list of deployments for the requested groups."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListDeviceDefinitionVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListDeviceDefinitionVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "ListDeviceDefinitionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListDeviceDefinitionsResponse": {
      "properties": {
        "Definitions": {
          "$ref": "#/definitions/__listOfDefinitionInformation",
          "description": "Information about a definition."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListFunctionDefinitionVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListFunctionDefinitionVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "ListFunctionDefinitionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListFunctionDefinitionsResponse": {
      "properties": {
        "Definitions": {
          "$ref": "#/definitions/__listOfDefinitionInformation",
          "description": "Information about a definition."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListGroupCertificateAuthoritiesRequest": {
      "properties": {},
      "type": "object"
    },
    "ListGroupCertificateAuthoritiesResponse": {
      "properties": {
        "GroupCertificateAuthorities": {
          "$ref": "#/definitions/__listOfGroupCertificateAuthorityProperties",
          "description": "A list of certificate authorities associated with the group."
        }
      },
      "type": "object"
    },
    "ListGroupVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListGroupVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "ListGroupsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListGroupsResponse": {
      "properties": {
        "Groups": {
          "$ref": "#/definitions/__listOfGroupInformation",
          "description": "Information about a group."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListLoggerDefinitionVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListLoggerDefinitionVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "ListLoggerDefinitionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListLoggerDefinitionsResponse": {
      "properties": {
        "Definitions": {
          "$ref": "#/definitions/__listOfDefinitionInformation",
          "description": "Information about a definition."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListResourceDefinitionVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListResourceDefinitionVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "ListResourceDefinitionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListResourceDefinitionsResponse": {
      "properties": {
        "Definitions": {
          "$ref": "#/definitions/__listOfDefinitionInformation",
          "description": "Information about a definition."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListSubscriptionDefinitionVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListSubscriptionDefinitionVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "ListSubscriptionDefinitionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListSubscriptionDefinitionsResponse": {
      "properties": {
        "Definitions": {
          "$ref": "#/definitions/__listOfDefinitionInformation",
          "description": "Information about a definition."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListVersionsResponse": {
      "description": "A list of versions.",
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "The token for the next set of results, or ''null'' if there are no additional results."
        },
        "Versions": {
          "$ref": "#/definitions/__listOfVersionInformation",
          "description": "Information about a version."
        }
      },
      "type": "object"
    },
    "LocalDeviceResourceData": {
      "description": "Attributes that define a local device resource.",
      "properties": {
        "GroupOwnerSetting": {
          "$ref": "#/definitions/GroupOwnerSetting",
          "description": "Group/owner related settings for local resources."
        },
        "SourcePath": {
          "$ref": "#/definitions/__string",
          "description": "The local absolute path of the device resource. The source path for a device resource can refer only to a character device or block device under ''/dev''."
        }
      },
      "type": "object"
    },
    "LocalVolumeResourceData": {
      "description": "Attributes that define a local volume resource.",
      "properties": {
        "DestinationPath": {
          "$ref": "#/definitions/__string",
          "description": "The absolute local path of the resource inside the lambda environment."
        },
        "GroupOwnerSetting": {
          "$ref": "#/definitions/GroupOwnerSetting",
          "description": "Allows you to configure additional group privileges for the Lambda process. This field is optional."
        },
        "SourcePath": {
          "$ref": "#/definitions/__string",
          "description": "The local absolute path of the volume resource on the host. The source path for a volume resource type cannot start with ''/sys''."
        }
      },
      "type": "object"
    },
    "Logger": {
      "description": "Information about a logger",
      "properties": {
        "Component": {
          "$ref": "#/definitions/LoggerComponent",
          "description": "The component that will be subject to logging."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The id of the logger."
        },
        "Level": {
          "$ref": "#/definitions/LoggerLevel",
          "description": "The level of the logs."
        },
        "Space": {
          "$ref": "#/definitions/__integer",
          "description": "The amount of file space, in KB, to use if the local file system is used for logging purposes."
        },
        "Type": {
          "$ref": "#/definitions/LoggerType",
          "description": "The type of log output which will be used."
        }
      },
      "type": "object"
    },
    "LoggerComponent": {
      "enum": [
        "GreengrassSystem",
        "Lambda"
      ],
      "type": "string"
    },
    "LoggerDefinitionVersion": {
      "description": "Information about a logger definition version.",
      "properties": {
        "Loggers": {
          "$ref": "#/definitions/__listOfLogger",
          "description": "A list of loggers."
        }
      },
      "type": "object"
    },
    "LoggerLevel": {
      "enum": [
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR",
        "FATAL"
      ],
      "type": "string"
    },
    "LoggerType": {
      "enum": [
        "FileSystem",
        "AWSCloudWatch"
      ],
      "type": "string"
    },
    "Permission": {
      "description": "The type of permission a function has to access a resource.",
      "enum": [
        "ro",
        "rw"
      ],
      "type": "string"
    },
    "ResetDeploymentsRequest": {
      "description": "Information needed to reset deployments.",
      "properties": {
        "Force": {
          "$ref": "#/definitions/__boolean",
          "description": "If true, performs a best-effort only core reset."
        }
      },
      "type": "object"
    },
    "ResetDeploymentsResponse": {
      "properties": {
        "DeploymentArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the deployment."
        },
        "DeploymentId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the deployment."
        }
      },
      "type": "object"
    },
    "Resource": {
      "description": "Information about a resource.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The resource ID, used to refer to a resource in the Lambda function configuration. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group."
        },
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The descriptive resource name, which is displayed on the Greengrass console. Max length 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group."
        },
        "ResourceDataContainer": {
          "$ref": "#/definitions/ResourceDataContainer",
          "description": "A container of data for all resource types."
        }
      },
      "type": "object"
    },
    "ResourceAccessPolicy": {
      "description": "A policy used by the function to access a resource.",
      "properties": {
        "Permission": {
          "$ref": "#/definitions/Permission",
          "description": "The permissions that the Lambda function has to the resource. Can be one of ''rw'' (read/write) or ''ro'' (read-only)."
        },
        "ResourceId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the resource. (This ID is assigned to the resource when you create the resource definiton.)"
        }
      },
      "type": "object"
    },
    "ResourceDataContainer": {
      "description": "A container for resource data. The container takes only one of the following supported resource data types: ''LocalDeviceResourceData'', ''LocalVolumeResourceData'', ''SageMakerMachineLearningModelResourceData'', ''S3MachineLearningModelResourceData''.",
      "properties": {
        "LocalDeviceResourceData": {
          "$ref": "#/definitions/LocalDeviceResourceData",
          "description": "Attributes that define the local device resource."
        },
        "LocalVolumeResourceData": {
          "$ref": "#/definitions/LocalVolumeResourceData",
          "description": "Attributes that define the local volume resource."
        },
        "S3MachineLearningModelResourceData": {
          "$ref": "#/definitions/S3MachineLearningModelResourceData",
          "description": "Attributes that define an S3 machine learning resource."
        },
        "SageMakerMachineLearningModelResourceData": {
          "$ref": "#/definitions/SageMakerMachineLearningModelResourceData",
          "description": "Attributes that define an SageMaker machine learning resource."
        }
      },
      "type": "object"
    },
    "ResourceDefinitionVersion": {
      "description": "Information about a resource definition version.",
      "properties": {
        "Resources": {
          "$ref": "#/definitions/__listOfResource",
          "description": "A list of resources."
        }
      },
      "type": "object"
    },
    "S3MachineLearningModelResourceData": {
      "description": "Attributes that define an S3 machine learning resource.",
      "properties": {
        "DestinationPath": {
          "$ref": "#/definitions/__string",
          "description": "The absolute local path of the resource inside the Lambda environment."
        },
        "S3Uri": {
          "$ref": "#/definitions/__string",
          "description": "The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format."
        }
      },
      "type": "object"
    },
    "S3UrlSignerRole": {
      "description": "The IAM Role that Greengrass will use to create pre-signed URLs pointing towards the update artifact.",
      "type": "string"
    },
    "SageMakerMachineLearningModelResourceData": {
      "description": "Attributes that define an SageMaker machine learning resource.",
      "properties": {
        "DestinationPath": {
          "$ref": "#/definitions/__string",
          "description": "The absolute local path of the resource inside the Lambda environment."
        },
        "SageMakerJobArn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the SageMaker training job that represents the source model."
        }
      },
      "type": "object"
    },
    "SoftwareToUpdate": {
      "description": "The piece of software on the Greengrass core that will be updated.",
      "enum": [
        "core",
        "ota_agent"
      ],
      "type": "string"
    },
    "Subscription": {
      "description": "Information about a subscription.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The id of the subscription."
        },
        "Source": {
          "$ref": "#/definitions/__string",
          "description": "The source of the subscription. Can be a thing ARN, a Lambda function ARN, 'cloud' (which represents the IoT cloud), or 'GGShadowService'."
        },
        "Subject": {
          "$ref": "#/definitions/__string",
          "description": "The subject of the message."
        },
        "Target": {
          "$ref": "#/definitions/__string",
          "description": "Where the message is sent to. Can be a thing ARN, a Lambda function ARN, 'cloud' (which represents the IoT cloud), or 'GGShadowService'."
        }
      },
      "type": "object"
    },
    "SubscriptionDefinitionVersion": {
      "description": "Information about a subscription definition version.",
      "properties": {
        "Subscriptions": {
          "$ref": "#/definitions/__listOfSubscription",
          "description": "A list of subscriptions."
        }
      },
      "type": "object"
    },
    "UpdateAgentLogLevel": {
      "description": "The minimum level of log statements that should be logged by the OTA Agent during an update.",
      "enum": [
        "NONE",
        "TRACE",
        "DEBUG",
        "VERBOSE",
        "INFO",
        "WARN",
        "ERROR",
        "FATAL"
      ],
      "type": "string"
    },
    "UpdateConnectivityInfoRequest": {
      "description": "Connectivity information.",
      "properties": {
        "ConnectivityInfo": {
          "$ref": "#/definitions/__listOfConnectivityInfo",
          "description": "A list of connectivity info."
        }
      },
      "type": "object"
    },
    "UpdateConnectivityInfoResponse": {
      "properties": {
        "Message": {
          "$ref": "#/definitions/__string",
          "description": "A message about the connectivity info update request."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The new version of the connectivity info."
        }
      },
      "type": "object"
    },
    "UpdateCoreDefinitionRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "UpdateCoreDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateDeviceDefinitionRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "UpdateDeviceDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateFunctionDefinitionRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "UpdateFunctionDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateGroupCertificateConfigurationRequest": {
      "properties": {
        "CertificateExpiryInMilliseconds": {
          "$ref": "#/definitions/__string",
          "description": "The amount of time remaining before the certificate expires, in milliseconds."
        }
      },
      "type": "object"
    },
    "UpdateGroupCertificateConfigurationResponse": {
      "properties": {
        "CertificateAuthorityExpiryInMilliseconds": {
          "$ref": "#/definitions/__string",
          "description": "The amount of time remaining before the certificate authority expires, in milliseconds."
        },
        "CertificateExpiryInMilliseconds": {
          "$ref": "#/definitions/__string",
          "description": "The amount of time remaining before the certificate expires, in milliseconds."
        },
        "GroupId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the group certificate configuration."
        }
      },
      "type": "object"
    },
    "UpdateGroupRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "UpdateGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateLoggerDefinitionRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "UpdateLoggerDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateResourceDefinitionRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "UpdateResourceDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateSubscriptionDefinitionRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/__string",
          "description": "The name of the definition."
        }
      },
      "type": "object"
    },
    "UpdateSubscriptionDefinitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateTargets": {
      "description": "The ARNs of the targets (IoT things or IoT thing groups) that this update will be applied to.",
      "items": {
        "$ref": "#/definitions/__string"
      },
      "type": "array"
    },
    "UpdateTargetsArchitecture": {
      "description": "The architecture of the cores which are the targets of an update.",
      "enum": [
        "armv7l",
        "x86_64",
        "aarch64"
      ],
      "type": "string"
    },
    "UpdateTargetsOperatingSystem": {
      "description": "The operating system of the cores which are the targets of an update.",
      "enum": [
        "ubuntu",
        "raspbian",
        "amazon_linux"
      ],
      "type": "string"
    },
    "VersionInformation": {
      "description": "Information about a version.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The ARN of the version."
        },
        "CreationTimestamp": {
          "$ref": "#/definitions/__string",
          "description": "The time, in milliseconds since the epoch, when the version was created."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the version."
        },
        "Version": {
          "$ref": "#/definitions/__string",
          "description": "The unique ID of the version."
        }
      },
      "type": "object"
    },
    "__boolean": {
      "type": "boolean"
    },
    "__double": {
      "format": "double",
      "type": "number"
    },
    "__integer": {
      "type": "integer"
    },
    "__listOfConnectivityInfo": {
      "items": {
        "$ref": "#/definitions/ConnectivityInfo"
      },
      "type": "array"
    },
    "__listOfCore": {
      "items": {
        "$ref": "#/definitions/Core"
      },
      "type": "array"
    },
    "__listOfDefinitionInformation": {
      "items": {
        "$ref": "#/definitions/DefinitionInformation"
      },
      "type": "array"
    },
    "__listOfDevice": {
      "items": {
        "$ref": "#/definitions/Device"
      },
      "type": "array"
    },
    "__listOfFunction": {
      "items": {
        "$ref": "#/definitions/Function"
      },
      "type": "array"
    },
    "__listOfGroupCertificateAuthorityProperties": {
      "items": {
        "$ref": "#/definitions/GroupCertificateAuthorityProperties"
      },
      "type": "array"
    },
    "__listOfGroupInformation": {
      "items": {
        "$ref": "#/definitions/GroupInformation"
      },
      "type": "array"
    },
    "__listOfLogger": {
      "items": {
        "$ref": "#/definitions/Logger"
      },
      "type": "array"
    },
    "__listOfResource": {
      "items": {
        "$ref": "#/definitions/Resource"
      },
      "type": "array"
    },
    "__listOfResourceAccessPolicy": {
      "items": {
        "$ref": "#/definitions/ResourceAccessPolicy"
      },
      "type": "array"
    },
    "__listOfSubscription": {
      "items": {
        "$ref": "#/definitions/Subscription"
      },
      "type": "array"
    },
    "__listOfVersionInformation": {
      "items": {
        "$ref": "#/definitions/VersionInformation"
      },
      "type": "array"
    },
    "__long": {
      "type": "integer"
    },
    "__mapOf__string": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/__string"
          },
          "value": {
            "$ref": "#/definitions/__string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "__string": {
      "type": "string"
    },
    "__timestamp": {
      "format": "date-time",
      "type": "string"
    }
  }
}
