{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "host": "servicecatalog.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Service Catalog</fullname> <p> <a href=\"https://aws.amazon.com/servicecatalog/\">AWS Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for use on AWS. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">AWS Service Catalog Concepts</a>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Service Catalog",
    "version": "2015-12-10",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/servicecatalog-2015-12-10.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "servicecatalog"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/servicecatalog/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "header",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "header",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Accepts an offer to share the specified portfolio.",
        "operationId": "AcceptPortfolioShare",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AcceptPortfolioShareInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AcceptPortfolioShareOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/#AssociatePrincipalWithPortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Associates the specified principal ARN with the specified portfolio.",
        "operationId": "AssociatePrincipalWithPortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociatePrincipalWithPortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociatePrincipalWithPortfolioOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/#AssociateProductWithPortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Associates the specified product with the specified portfolio.",
        "operationId": "AssociateProductWithPortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateProductWithPortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateProductWithPortfolioOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/#AssociateTagOptionWithResource": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Associate the specified TagOption with the specified portfolio or product.",
        "operationId": "AssociateTagOptionWithResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateTagOptionWithResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateTagOptionWithResourceOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "DuplicateResourceException",
            "schema": {
              "$ref": "#/definitions/DuplicateResourceException"
            }
          },
          "485": {
            "description": "InvalidStateException",
            "schema": {
              "$ref": "#/definitions/InvalidStateException"
            }
          }
        }
      }
    },
    "/#CopyProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Copies the specified source product to the specified target product or a new product.</p> <p>You can copy a product to the same account or another account. You can copy a product to the same region or another region.</p> <p>This operation is performed asynchronously. To track the progress of the operation, use <a>DescribeCopyProductStatus</a>.</p>",
        "operationId": "CopyProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyProductOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#CreateConstraint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a constraint.",
        "operationId": "CreateConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateConstraintInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateConstraintOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "DuplicateResourceException",
            "schema": {
              "$ref": "#/definitions/DuplicateResourceException"
            }
          }
        }
      }
    },
    "/#CreatePortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a portfolio.",
        "operationId": "CreatePortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePortfolioOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "482": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          }
        }
      }
    },
    "/#CreatePortfolioShare": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Shares the specified portfolio with the specified account.",
        "operationId": "CreatePortfolioShare",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePortfolioShareInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePortfolioShareOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "482": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#CreateProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a product.",
        "operationId": "CreateProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateProductOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "482": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          }
        }
      }
    },
    "/#CreateProvisionedProductPlan": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a plan. A plan includes the list of resources to be created (when provisioning a new product) or modified (when updating a provisioned product) when the plan is executed.</p> <p>You can create one plan per provisioned product. To create a plan for an existing provisioned product, the product status must be AVAILBLE or TAINTED.</p> <p>To view the resource changes in the change set, use <a>DescribeProvisionedProductPlan</a>. To create or modify the provisioned product, use <a>ExecuteProvisionedProductPlan</a>.</p>",
        "operationId": "CreateProvisionedProductPlan",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProvisionedProductPlanInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateProvisionedProductPlanOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidStateException",
            "schema": {
              "$ref": "#/definitions/InvalidStateException"
            }
          }
        }
      }
    },
    "/#CreateProvisioningArtifact": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot create a provisioning artifact for a product that was shared with you.</p>",
        "operationId": "CreateProvisioningArtifact",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProvisioningArtifactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateProvisioningArtifactOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/#CreateTagOption": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a TagOption.",
        "operationId": "CreateTagOption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTagOptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTagOptionOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "DuplicateResourceException",
            "schema": {
              "$ref": "#/definitions/DuplicateResourceException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/#DeleteConstraint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes the specified constraint.",
        "operationId": "DeleteConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteConstraintInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteConstraintOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#DeletePortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes the specified portfolio.</p> <p>You cannot delete a portfolio if it was shared with you or if it has associated products, users, constraints, or shared accounts.</p>",
        "operationId": "DeletePortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePortfolioOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "483": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          }
        }
      }
    },
    "/#DeletePortfolioShare": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Stops sharing the specified portfolio with the specified account.",
        "operationId": "DeletePortfolioShare",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePortfolioShareInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePortfolioShareOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DeleteProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes the specified product.</p> <p>You cannot delete a product if it was shared with you or is associated with a portfolio.</p>",
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteProductOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "483": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          }
        }
      }
    },
    "/#DeleteProvisionedProductPlan": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes the specified plan.",
        "operationId": "DeleteProvisionedProductPlan",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteProvisionedProductPlanInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteProvisionedProductPlanOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DeleteProvisioningArtifact": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes the specified provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot delete a provisioning artifact associated with a product that was shared with you. You cannot delete the last provisioning artifact for a product, because a product must have at least one provisioning artifact.</p>",
        "operationId": "DeleteProvisioningArtifact",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteProvisioningArtifactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteProvisioningArtifactOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#DeleteTagOption": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes the specified TagOption.</p> <p>You cannot delete a TagOption if it is associated with a product or portfolio.</p>",
        "operationId": "DeleteTagOption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTagOptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTagOptionOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeConstraint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified constraint.",
        "operationId": "DescribeConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeConstraintInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeConstraintOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeCopyProductStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets the status of the specified copy product operation.",
        "operationId": "DescribeCopyProductStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeCopyProductStatusInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeCopyProductStatusOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribePortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified portfolio.",
        "operationId": "DescribePortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePortfolioOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified product.",
        "operationId": "DescribeProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeProductOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#DescribeProductAsAdmin": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified product. This operation is run with administrator access.",
        "operationId": "DescribeProductAsAdmin",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeProductAsAdminInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeProductAsAdminOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeProductView": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified product.",
        "operationId": "DescribeProductView",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeProductViewInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeProductViewOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#DescribeProvisionedProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified provisioned product.",
        "operationId": "DescribeProvisionedProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeProvisionedProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeProvisionedProductOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeProvisionedProductPlan": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the resource changes for the specified plan.",
        "operationId": "DescribeProvisionedProductPlan",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeProvisionedProductPlanInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeProvisionedProductPlanOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#DescribeProvisioningArtifact": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified provisioning artifact (also known as a version) for the specified product.",
        "operationId": "DescribeProvisioningArtifact",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeProvisioningArtifactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeProvisioningArtifactOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeProvisioningParameters": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Gets information about the configuration required to provision the specified product using the specified provisioning artifact.</p> <p>If the output contains a TagOption key with an empty list of values, there is a TagOption conflict for that key. The end user cannot take action to fix the conflict, and launch is not blocked. In subsequent calls to <a>ProvisionProduct</a>, do not include conflicted TagOption keys as tags, or this causes the error \"Parameter validation failed: Missing required parameter in Tags[<i>N</i>]:<i>Value</i>\". Tag the provisioned product with the value <code>sc-tagoption-conflict-portfolioId-productId</code>.</p>",
        "operationId": "DescribeProvisioningParameters",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeProvisioningParametersInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeProvisioningParametersOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeRecord": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Gets information about the specified request operation.</p> <p>Use this operation after calling a request operation (for example, <a>ProvisionProduct</a>, <a>TerminateProvisionedProduct</a>, or <a>UpdateProvisionedProduct</a>). </p>",
        "operationId": "DescribeRecord",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeRecordInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeRecordOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DescribeTagOption": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the specified TagOption.",
        "operationId": "DescribeTagOption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeTagOptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeTagOptionOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DisassociatePrincipalFromPortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Disassociates a previously associated principal ARN from a specified portfolio.",
        "operationId": "DisassociatePrincipalFromPortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociatePrincipalFromPortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociatePrincipalFromPortfolioOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#DisassociateProductFromPortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Disassociates the specified product from the specified portfolio. ",
        "operationId": "DisassociateProductFromPortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociateProductFromPortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateProductFromPortfolioOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#DisassociateTagOptionFromResource": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Disassociates the specified TagOption from the specified resource.",
        "operationId": "DisassociateTagOptionFromResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociateTagOptionFromResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateTagOptionFromResourceOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#ExecuteProvisionedProductPlan": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Provisions or modifies a product based on the resource changes for the specified plan.",
        "operationId": "ExecuteProvisionedProductPlan",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecuteProvisionedProductPlanInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExecuteProvisionedProductPlanOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidStateException",
            "schema": {
              "$ref": "#/definitions/InvalidStateException"
            }
          }
        }
      }
    },
    "/#ListAcceptedPortfolioShares": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all portfolios for which sharing was accepted by this account.",
        "operationId": "ListAcceptedPortfolioShares",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAcceptedPortfolioSharesInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAcceptedPortfolioSharesOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListConstraintsForPortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the constraints for the specified portfolio and product.",
        "operationId": "ListConstraintsForPortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListConstraintsForPortfolioInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListConstraintsForPortfolioOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListLaunchPaths": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the paths to the specified product. A path is how the user has access to a specified product, and is necessary when provisioning a product. A path also determines the constraints put on the product.",
        "operationId": "ListLaunchPaths",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLaunchPathsInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLaunchPathsOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#ListPortfolioAccess": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the account IDs that have access to the specified portfolio.",
        "operationId": "ListPortfolioAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPortfolioAccessInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPortfolioAccessOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#ListPortfolios": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all portfolios in the catalog.",
        "operationId": "ListPortfolios",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPortfoliosInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPortfoliosOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListPortfoliosForProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all portfolios that the specified product is associated with.",
        "operationId": "ListPortfoliosForProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPortfoliosForProductInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPortfoliosForProductOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#ListPrincipalsForPortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all principal ARNs associated with the specified portfolio.",
        "operationId": "ListPrincipalsForPortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPrincipalsForPortfolioInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPrincipalsForPortfolioOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListProvisionedProductPlans": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the plans for the specified provisioned product or all plans to which the user has access.",
        "operationId": "ListProvisionedProductPlans",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListProvisionedProductPlansInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListProvisionedProductPlansOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListProvisioningArtifacts": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all provisioning artifacts (also known as versions) for the specified product.",
        "operationId": "ListProvisioningArtifacts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListProvisioningArtifactsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListProvisioningArtifactsOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListRecordHistory": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the specified requests or all performed requests.",
        "operationId": "ListRecordHistory",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRecordHistoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRecordHistoryOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListResourcesForTagOption": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the resources associated with the specified TagOption.",
        "operationId": "ListResourcesForTagOption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourcesForTagOptionInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourcesForTagOptionOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ListTagOptions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the specified TagOptions or all TagOptions.",
        "operationId": "ListTagOptions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagOptionsInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagOptionsOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#ProvisionProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Provisions the specified product.</p> <p>A provisioned product is a resourced instance of a product. For example, provisioning a product based on a CloudFormation template launches a CloudFormation stack and its underlying resources. You can check the status of this request using <a>DescribeRecord</a>.</p> <p>If the request contains a tag key with an empty list of values, there is a tag conflict for that key. Do not include conflicted keys as tags, or this causes the error \"Parameter validation failed: Missing required parameter in Tags[<i>N</i>]:<i>Value</i>\".</p>",
        "operationId": "ProvisionProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProvisionProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProvisionProductOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "DuplicateResourceException",
            "schema": {
              "$ref": "#/definitions/DuplicateResourceException"
            }
          }
        }
      }
    },
    "/#RejectPortfolioShare": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Rejects an offer to share the specified portfolio.",
        "operationId": "RejectPortfolioShare",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectPortfolioShareInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RejectPortfolioShareOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#ScanProvisionedProducts": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Lists the provisioned products that are available (not terminated).</p> <p>To use additional filtering, see <a>SearchProvisionedProducts</a>.</p>",
        "operationId": "ScanProvisionedProducts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScanProvisionedProductsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScanProvisionedProductsOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#SearchProducts": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the products to which the caller has access.",
        "operationId": "SearchProducts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchProductsInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchProductsOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#SearchProductsAsAdmin": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the products for the specified portfolio or all products.",
        "operationId": "SearchProductsAsAdmin",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchProductsAsAdminInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchProductsAsAdminOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#SearchProvisionedProducts": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets information about the provisioned products that meet the specified criteria.",
        "operationId": "SearchProvisionedProducts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchProvisionedProductsInput"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "PageSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PageToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchProvisionedProductsOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#TerminateProvisionedProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Terminates the specified provisioned product.</p> <p>This operation does not delete any records associated with the provisioned product.</p> <p>You can check the status of this request using <a>DescribeRecord</a>.</p>",
        "operationId": "TerminateProvisionedProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TerminateProvisionedProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TerminateProvisionedProductOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#UpdateConstraint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the specified constraint.",
        "operationId": "UpdateConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConstraintInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateConstraintOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#UpdatePortfolio": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Updates the specified portfolio.</p> <p>You cannot update a product that was shared with you.</p>",
        "operationId": "UpdatePortfolio",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePortfolioInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePortfolioOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          }
        }
      }
    },
    "/#UpdateProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the specified product.",
        "operationId": "UpdateProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateProductOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "482": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          }
        }
      }
    },
    "/#UpdateProvisionedProduct": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Requests updates to the configuration of the specified provisioned product.</p> <p>If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely.</p> <p>You can check the status of this request using <a>DescribeRecord</a>.</p>",
        "operationId": "UpdateProvisionedProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProvisionedProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateProvisionedProductOutput"
            }
          },
          "480": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/#UpdateProvisioningArtifact": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Updates the specified provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot update a provisioning artifact for a product that was shared with you.</p>",
        "operationId": "UpdateProvisioningArtifact",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProvisioningArtifactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateProvisioningArtifactOutput"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    },
    "/#UpdateTagOption": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the specified TagOption.",
        "operationId": "UpdateTagOption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTagOptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTagOptionOutput"
            }
          },
          "480": {
            "description": "TagOptionNotMigratedException",
            "schema": {
              "$ref": "#/definitions/TagOptionNotMigratedException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "DuplicateResourceException",
            "schema": {
              "$ref": "#/definitions/DuplicateResourceException"
            }
          },
          "483": {
            "description": "InvalidParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidParametersException"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AcceptLanguage": {
      "type": "string"
    },
    "AcceptPortfolioShareInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "PortfolioId"
      ],
      "type": "object"
    },
    "AcceptPortfolioShareOutput": {
      "properties": {},
      "type": "object"
    },
    "AccessLevelFilter": {
      "description": "The access level to use to filter results.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/AccessLevelFilterKey",
          "description": "<p>The access level.</p> <ul> <li> <p> <code>Account</code> - Filter results based on the account.</p> </li> <li> <p> <code>Role</code> - Filter results based on the federated role of the specified user.</p> </li> <li> <p> <code>User</code> - Filter results based on the specified user.</p> </li> </ul>"
        },
        "Value": {
          "$ref": "#/definitions/AccessLevelFilterValue",
          "description": "The user to which the access level applies. The only supported value is <code>Self</code>."
        }
      },
      "type": "object"
    },
    "AccessLevelFilterKey": {
      "enum": [
        "Account",
        "Role",
        "User"
      ],
      "type": "string"
    },
    "AccessLevelFilterValue": {
      "type": "string"
    },
    "AccountId": {
      "pattern": "^[0-9]{12}$",
      "type": "string"
    },
    "AccountIds": {
      "items": {
        "$ref": "#/definitions/AccountId"
      },
      "type": "array"
    },
    "AddTags": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "maxItems": 20,
      "type": "array"
    },
    "AllowedValue": {
      "type": "string"
    },
    "AllowedValues": {
      "items": {
        "$ref": "#/definitions/AllowedValue"
      },
      "type": "array"
    },
    "ApproximateCount": {
      "type": "integer"
    },
    "AssociatePrincipalWithPortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "PrincipalARN": {
          "$ref": "#/definitions/PrincipalARN",
          "description": "The ARN of the principal (IAM user, role, or group)."
        },
        "PrincipalType": {
          "$ref": "#/definitions/PrincipalType",
          "description": "The principal type. The supported value is <code>IAM</code>."
        }
      },
      "required": [
        "PortfolioId",
        "PrincipalARN",
        "PrincipalType"
      ],
      "type": "object"
    },
    "AssociatePrincipalWithPortfolioOutput": {
      "properties": {},
      "type": "object"
    },
    "AssociateProductWithPortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "SourcePortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the source portfolio."
        }
      },
      "required": [
        "ProductId",
        "PortfolioId"
      ],
      "type": "object"
    },
    "AssociateProductWithPortfolioOutput": {
      "properties": {},
      "type": "object"
    },
    "AssociateTagOptionWithResourceInput": {
      "properties": {
        "ResourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": "The resource identifier."
        },
        "TagOptionId": {
          "$ref": "#/definitions/TagOptionId",
          "description": "The TagOption identifier."
        }
      },
      "required": [
        "ResourceId",
        "TagOptionId"
      ],
      "type": "object"
    },
    "AssociateTagOptionWithResourceOutput": {
      "properties": {},
      "type": "object"
    },
    "AttributeValue": {
      "type": "string"
    },
    "CausingEntity": {
      "type": "string"
    },
    "ChangeAction": {
      "enum": [
        "ADD",
        "MODIFY",
        "REMOVE"
      ],
      "type": "string"
    },
    "CloudWatchDashboard": {
      "description": "Information about a CloudWatch dashboard.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/CloudWatchDashboardName",
          "description": "The name of the CloudWatch dashboard."
        }
      },
      "type": "object"
    },
    "CloudWatchDashboardName": {
      "type": "string"
    },
    "CloudWatchDashboards": {
      "items": {
        "$ref": "#/definitions/CloudWatchDashboard"
      },
      "type": "array"
    },
    "ConstraintDescription": {
      "maxLength": 2000,
      "type": "string"
    },
    "ConstraintDetail": {
      "description": "Information about a constraint.",
      "properties": {
        "ConstraintId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the constraint."
        },
        "Description": {
          "$ref": "#/definitions/ConstraintDescription",
          "description": "The description of the constraint."
        },
        "Owner": {
          "$ref": "#/definitions/AccountId",
          "description": "The owner of the constraint."
        },
        "Type": {
          "$ref": "#/definitions/ConstraintType",
          "description": "<p>The type of constraint.</p> <ul> <li> <p> <code>LAUNCH</code> </p> </li> <li> <p> <code>NOTIFICATION</code> </p> </li> <li> <p> <code>TEMPLATE</code> </p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "ConstraintDetails": {
      "items": {
        "$ref": "#/definitions/ConstraintDetail"
      },
      "type": "array"
    },
    "ConstraintParameters": {
      "type": "string"
    },
    "ConstraintSummaries": {
      "items": {
        "$ref": "#/definitions/ConstraintSummary"
      },
      "type": "array"
    },
    "ConstraintSummary": {
      "description": "Summary information about a constraint.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/ConstraintDescription",
          "description": "The description of the constraint."
        },
        "Type": {
          "$ref": "#/definitions/ConstraintType",
          "description": "<p>The type of constraint.</p> <ul> <li> <p> <code>LAUNCH</code> </p> </li> <li> <p> <code>NOTIFICATION</code> </p> </li> <li> <p> <code>TEMPLATE</code> </p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "ConstraintType": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "CopyOption": {
      "enum": [
        "CopyTags"
      ],
      "type": "string"
    },
    "CopyOptions": {
      "items": {
        "$ref": "#/definitions/CopyOption"
      },
      "type": "array"
    },
    "CopyProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "CopyOptions": {
          "$ref": "#/definitions/CopyOptions",
          "description": "The copy options. If the value is <code>CopyTags</code>, the tags from the source product are copied to the target product."
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": " A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request. "
        },
        "SourceProductArn": {
          "$ref": "#/definitions/ProductArn",
          "description": "The Amazon Resource Name (ARN) of the source product."
        },
        "SourceProvisioningArtifactIdentifiers": {
          "$ref": "#/definitions/SourceProvisioningArtifactProperties",
          "description": "The identifiers of the provisioning artifacts (also known as versions) of the product to copy. By default, all provisioning artifacts are copied."
        },
        "TargetProductId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the target product. By default, a new product is created."
        },
        "TargetProductName": {
          "$ref": "#/definitions/ProductViewName",
          "description": "A name for the target product. The default is the name of the source product."
        }
      },
      "required": [
        "SourceProductArn",
        "IdempotencyToken"
      ],
      "type": "object"
    },
    "CopyProductOutput": {
      "properties": {
        "CopyProductToken": {
          "$ref": "#/definitions/Id",
          "description": "The token to use to track the progress of the operation."
        }
      },
      "type": "object"
    },
    "CopyProductStatus": {
      "enum": [
        "SUCCEEDED",
        "IN_PROGRESS",
        "FAILED"
      ],
      "type": "string"
    },
    "CreateConstraintInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Description": {
          "$ref": "#/definitions/ConstraintDescription",
          "description": "The description of the constraint."
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "Parameters": {
          "$ref": "#/definitions/ConstraintParameters",
          "description": "<p>The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:</p> <dl> <dt>LAUNCH</dt> <dd> <p>Specify the <code>RoleArn</code> property as follows:</p> <p>\\\"RoleArn\\\" : \\\"arn:aws:iam::123456789012:role/LaunchRole\\\"</p> </dd> <dt>NOTIFICATION</dt> <dd> <p>Specify the <code>NotificationArns</code> property as follows:</p> <p>\\\"NotificationArns\\\" : [\\\"arn:aws:sns:us-east-1:123456789012:Topic\\\"]</p> </dd> <dt>TEMPLATE</dt> <dd> <p>Specify the <code>Rules</code> property. For more information, see <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html\">Template Constraint Rules</a>.</p> </dd> </dl>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "Type": {
          "$ref": "#/definitions/ConstraintType",
          "description": "<p>The type of constraint.</p> <ul> <li> <p> <code>LAUNCH</code> </p> </li> <li> <p> <code>NOTIFICATION</code> </p> </li> <li> <p> <code>TEMPLATE</code> </p> </li> </ul>"
        }
      },
      "required": [
        "PortfolioId",
        "ProductId",
        "Parameters",
        "Type",
        "IdempotencyToken"
      ],
      "type": "object"
    },
    "CreateConstraintOutput": {
      "properties": {
        "ConstraintDetail": {
          "$ref": "#/definitions/ConstraintDetail",
          "description": "Information about the constraint."
        },
        "ConstraintParameters": {
          "$ref": "#/definitions/ConstraintParameters",
          "description": "The constraint parameters."
        },
        "Status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the current request."
        }
      },
      "type": "object"
    },
    "CreatePortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Description": {
          "$ref": "#/definitions/PortfolioDescription",
          "description": "The description of the portfolio."
        },
        "DisplayName": {
          "$ref": "#/definitions/PortfolioDisplayName",
          "description": "The name to use for display purposes."
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "ProviderName": {
          "$ref": "#/definitions/ProviderName",
          "description": "The name of the portfolio provider."
        },
        "Tags": {
          "$ref": "#/definitions/AddTags",
          "description": "One or more tags."
        }
      },
      "required": [
        "DisplayName",
        "ProviderName",
        "IdempotencyToken"
      ],
      "type": "object"
    },
    "CreatePortfolioOutput": {
      "properties": {
        "PortfolioDetail": {
          "$ref": "#/definitions/PortfolioDetail",
          "description": "Information about the portfolio."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "Information about the tags associated with the portfolio."
        }
      },
      "type": "object"
    },
    "CreatePortfolioShareInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AccountId": {
          "$ref": "#/definitions/AccountId",
          "description": "The AWS account ID."
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "PortfolioId",
        "AccountId"
      ],
      "type": "object"
    },
    "CreatePortfolioShareOutput": {
      "properties": {},
      "type": "object"
    },
    "CreateProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Description": {
          "$ref": "#/definitions/ProductViewShortDescription",
          "description": "The description of the product."
        },
        "Distributor": {
          "$ref": "#/definitions/ProductViewOwner",
          "description": "The distributor of the product."
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "Name": {
          "$ref": "#/definitions/ProductViewName",
          "description": "The name of the product."
        },
        "Owner": {
          "$ref": "#/definitions/ProductViewOwner",
          "description": "The owner of the product."
        },
        "ProductType": {
          "$ref": "#/definitions/ProductType",
          "description": "The type of product."
        },
        "ProvisioningArtifactParameters": {
          "$ref": "#/definitions/ProvisioningArtifactProperties",
          "description": "The configuration of the provisioning artifact."
        },
        "SupportDescription": {
          "$ref": "#/definitions/SupportDescription",
          "description": "The support information about the product."
        },
        "SupportEmail": {
          "$ref": "#/definitions/SupportEmail",
          "description": "The contact email for product support."
        },
        "SupportUrl": {
          "$ref": "#/definitions/SupportUrl",
          "description": "The contact URL for product support."
        },
        "Tags": {
          "$ref": "#/definitions/AddTags",
          "description": "One or more tags."
        }
      },
      "required": [
        "Name",
        "Owner",
        "ProductType",
        "ProvisioningArtifactParameters",
        "IdempotencyToken"
      ],
      "type": "object"
    },
    "CreateProductOutput": {
      "properties": {
        "ProductViewDetail": {
          "$ref": "#/definitions/ProductViewDetail",
          "description": "Information about the product view."
        },
        "ProvisioningArtifactDetail": {
          "$ref": "#/definitions/ProvisioningArtifactDetail",
          "description": "Information about the provisioning artifact."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "Information about the tags associated with the product."
        }
      },
      "type": "object"
    },
    "CreateProvisionedProductPlanInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "NotificationArns": {
          "$ref": "#/definitions/NotificationArns",
          "description": "Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events."
        },
        "PathId": {
          "$ref": "#/definitions/Id",
          "description": "The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <a>ListLaunchPaths</a>."
        },
        "PlanName": {
          "$ref": "#/definitions/ProvisionedProductPlanName",
          "description": "The name of the plan."
        },
        "PlanType": {
          "$ref": "#/definitions/ProvisionedProductPlanType",
          "description": "The plan type."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisionedProductName": {
          "$ref": "#/definitions/ProvisionedProductName",
          "description": "A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "ProvisioningParameters": {
          "$ref": "#/definitions/UpdateProvisioningParameters",
          "description": "Parameters specified by the administrator that are required for provisioning the product."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "One or more tags."
        }
      },
      "required": [
        "PlanName",
        "PlanType",
        "ProductId",
        "ProvisionedProductName",
        "ProvisioningArtifactId",
        "IdempotencyToken"
      ],
      "type": "object"
    },
    "CreateProvisionedProductPlanOutput": {
      "properties": {
        "PlanId": {
          "$ref": "#/definitions/Id",
          "description": "The plan identifier."
        },
        "PlanName": {
          "$ref": "#/definitions/ProvisionedProductPlanName",
          "description": "The name of the plan."
        },
        "ProvisionProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisionedProductName": {
          "$ref": "#/definitions/ProvisionedProductName",
          "description": "The user-friendly name of the provisioned product."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        }
      },
      "type": "object"
    },
    "CreateProvisioningArtifactInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "Parameters": {
          "$ref": "#/definitions/ProvisioningArtifactProperties",
          "description": "The configuration for the provisioning artifact."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "ProductId",
        "Parameters",
        "IdempotencyToken"
      ],
      "type": "object"
    },
    "CreateProvisioningArtifactOutput": {
      "properties": {
        "Info": {
          "$ref": "#/definitions/ProvisioningArtifactInfo",
          "description": "The URL of the CloudFormation template in Amazon S3, in JSON format."
        },
        "ProvisioningArtifactDetail": {
          "$ref": "#/definitions/ProvisioningArtifactDetail",
          "description": "Information about the provisioning artifact."
        },
        "Status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the current request."
        }
      },
      "type": "object"
    },
    "CreateTagOptionInput": {
      "properties": {
        "Key": {
          "$ref": "#/definitions/TagOptionKey",
          "description": "The TagOption key."
        },
        "Value": {
          "$ref": "#/definitions/TagOptionValue",
          "description": "The TagOption value."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "CreateTagOptionOutput": {
      "properties": {
        "TagOptionDetail": {
          "$ref": "#/definitions/TagOptionDetail",
          "description": "Information about the TagOption."
        }
      },
      "type": "object"
    },
    "CreatedTime": {
      "format": "date-time",
      "type": "string"
    },
    "CreationTime": {
      "format": "date-time",
      "type": "string"
    },
    "DefaultValue": {
      "type": "string"
    },
    "DeleteConstraintInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the constraint."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DeleteConstraintOutput": {
      "properties": {},
      "type": "object"
    },
    "DeletePortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DeletePortfolioOutput": {
      "properties": {},
      "type": "object"
    },
    "DeletePortfolioShareInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AccountId": {
          "$ref": "#/definitions/AccountId",
          "description": "The AWS account ID."
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "PortfolioId",
        "AccountId"
      ],
      "type": "object"
    },
    "DeletePortfolioShareOutput": {
      "properties": {},
      "type": "object"
    },
    "DeleteProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DeleteProductOutput": {
      "properties": {},
      "type": "object"
    },
    "DeleteProvisionedProductPlanInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "IgnoreErrors": {
          "$ref": "#/definitions/IgnoreErrors",
          "description": "If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources."
        },
        "PlanId": {
          "$ref": "#/definitions/Id",
          "description": "The plan identifier."
        }
      },
      "required": [
        "PlanId"
      ],
      "type": "object"
    },
    "DeleteProvisionedProductPlanOutput": {
      "properties": {},
      "type": "object"
    },
    "DeleteProvisioningArtifactInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        }
      },
      "required": [
        "ProductId",
        "ProvisioningArtifactId"
      ],
      "type": "object"
    },
    "DeleteProvisioningArtifactOutput": {
      "properties": {},
      "type": "object"
    },
    "DeleteTagOptionInput": {
      "properties": {
        "Id": {
          "$ref": "#/definitions/TagOptionId",
          "description": "The TagOption identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DeleteTagOptionOutput": {
      "properties": {},
      "type": "object"
    },
    "DescribeConstraintInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the constraint."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribeConstraintOutput": {
      "properties": {
        "ConstraintDetail": {
          "$ref": "#/definitions/ConstraintDetail",
          "description": "Information about the constraint."
        },
        "ConstraintParameters": {
          "$ref": "#/definitions/ConstraintParameters",
          "description": "The constraint parameters."
        },
        "Status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the current request."
        }
      },
      "type": "object"
    },
    "DescribeCopyProductStatusInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "CopyProductToken": {
          "$ref": "#/definitions/Id",
          "description": "The token for the copy product operation. This token is returned by <a>CopyProduct</a>."
        }
      },
      "required": [
        "CopyProductToken"
      ],
      "type": "object"
    },
    "DescribeCopyProductStatusOutput": {
      "properties": {
        "CopyProductStatus": {
          "$ref": "#/definitions/CopyProductStatus",
          "description": "The status of the copy product operation."
        },
        "StatusDetail": {
          "$ref": "#/definitions/StatusDetail",
          "description": "The status message."
        },
        "TargetProductId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the copied product."
        }
      },
      "type": "object"
    },
    "DescribePortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribePortfolioOutput": {
      "properties": {
        "PortfolioDetail": {
          "$ref": "#/definitions/PortfolioDetail",
          "description": "Information about the portfolio."
        },
        "TagOptions": {
          "$ref": "#/definitions/TagOptionDetails",
          "description": "Information about the TagOptions associated with the portfolio."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "Information about the tags associated with the portfolio."
        }
      },
      "type": "object"
    },
    "DescribeProductAsAdminInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribeProductAsAdminOutput": {
      "properties": {
        "ProductViewDetail": {
          "$ref": "#/definitions/ProductViewDetail",
          "description": "Information about the product view."
        },
        "ProvisioningArtifactSummaries": {
          "$ref": "#/definitions/ProvisioningArtifactSummaries",
          "description": "Information about the provisioning artifacts (also known as versions) for the specified product."
        },
        "TagOptions": {
          "$ref": "#/definitions/TagOptionDetails",
          "description": "Information about the TagOptions associated with the product."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "Information about the tags associated with the product."
        }
      },
      "type": "object"
    },
    "DescribeProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribeProductOutput": {
      "properties": {
        "ProductViewSummary": {
          "$ref": "#/definitions/ProductViewSummary",
          "description": "Summary information about the product view."
        },
        "ProvisioningArtifacts": {
          "$ref": "#/definitions/ProvisioningArtifacts",
          "description": "Information about the provisioning artifacts for the specified product."
        }
      },
      "type": "object"
    },
    "DescribeProductViewInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The product view identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribeProductViewOutput": {
      "properties": {
        "ProductViewSummary": {
          "$ref": "#/definitions/ProductViewSummary",
          "description": "Summary information about the product."
        },
        "ProvisioningArtifacts": {
          "$ref": "#/definitions/ProvisioningArtifacts",
          "description": "Information about the provisioning artifacts for the product."
        }
      },
      "type": "object"
    },
    "DescribeProvisionedProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The provisioned product identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribeProvisionedProductOutput": {
      "properties": {
        "CloudWatchDashboards": {
          "$ref": "#/definitions/CloudWatchDashboards",
          "description": "Any CloudWatch dashboards that were created when provisioning the product."
        },
        "ProvisionedProductDetail": {
          "$ref": "#/definitions/ProvisionedProductDetail",
          "description": "Information about the provisioned product."
        }
      },
      "type": "object"
    },
    "DescribeProvisionedProductPlanInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "PlanId": {
          "$ref": "#/definitions/Id",
          "description": "The plan identifier."
        }
      },
      "required": [
        "PlanId"
      ],
      "type": "object"
    },
    "DescribeProvisionedProductPlanOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "ProvisionedProductPlanDetails": {
          "$ref": "#/definitions/ProvisionedProductPlanDetails",
          "description": "Information about the plan."
        },
        "ResourceChanges": {
          "$ref": "#/definitions/ResourceChanges",
          "description": "Information about the resource changes that will occur when the plan is executed."
        }
      },
      "type": "object"
    },
    "DescribeProvisioningArtifactInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "Verbose": {
          "$ref": "#/definitions/Verbose",
          "description": "Indicates whether a verbose level of detail is enabled."
        }
      },
      "required": [
        "ProvisioningArtifactId",
        "ProductId"
      ],
      "type": "object"
    },
    "DescribeProvisioningArtifactOutput": {
      "properties": {
        "Info": {
          "$ref": "#/definitions/ProvisioningArtifactInfo",
          "description": "The URL of the CloudFormation template in Amazon S3."
        },
        "ProvisioningArtifactDetail": {
          "$ref": "#/definitions/ProvisioningArtifactDetail",
          "description": "Information about the provisioning artifact."
        },
        "Status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the current request."
        }
      },
      "type": "object"
    },
    "DescribeProvisioningParametersInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PathId": {
          "$ref": "#/definitions/Id",
          "description": "The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <a>ListLaunchPaths</a>."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        }
      },
      "required": [
        "ProductId",
        "ProvisioningArtifactId"
      ],
      "type": "object"
    },
    "DescribeProvisioningParametersOutput": {
      "properties": {
        "ConstraintSummaries": {
          "$ref": "#/definitions/ConstraintSummaries",
          "description": "Information about the constraints used to provision the product."
        },
        "ProvisioningArtifactParameters": {
          "$ref": "#/definitions/ProvisioningArtifactParameters",
          "description": "Information about the parameters used to provision the product."
        },
        "TagOptions": {
          "$ref": "#/definitions/TagOptionSummaries",
          "description": "Information about the TagOptions associated with the resource."
        },
        "UsageInstructions": {
          "$ref": "#/definitions/UsageInstructions",
          "description": "Any additional metadata specifically related to the provisioning of the product. For example, see the <code>Version</code> field of the CloudFormation template."
        }
      },
      "type": "object"
    },
    "DescribeRecordInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The record identifier of the provisioned product. This identifier is returned by the request operation."
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribeRecordOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "RecordDetail": {
          "$ref": "#/definitions/RecordDetail",
          "description": "Information about the product."
        },
        "RecordOutputs": {
          "$ref": "#/definitions/RecordOutputs",
          "description": "Information about the product created as the result of a request. For example, the output for a CloudFormation-backed product that creates an S3 bucket would include the S3 bucket URL."
        }
      },
      "type": "object"
    },
    "DescribeTagOptionInput": {
      "properties": {
        "Id": {
          "$ref": "#/definitions/TagOptionId",
          "description": "The TagOption identifier."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "DescribeTagOptionOutput": {
      "properties": {
        "TagOptionDetail": {
          "$ref": "#/definitions/TagOptionDetail",
          "description": "Information about the TagOption."
        }
      },
      "type": "object"
    },
    "Description": {
      "type": "string"
    },
    "DisassociatePrincipalFromPortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "PrincipalARN": {
          "$ref": "#/definitions/PrincipalARN",
          "description": "The ARN of the principal (IAM user, role, or group)."
        }
      },
      "required": [
        "PortfolioId",
        "PrincipalARN"
      ],
      "type": "object"
    },
    "DisassociatePrincipalFromPortfolioOutput": {
      "properties": {},
      "type": "object"
    },
    "DisassociateProductFromPortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "ProductId",
        "PortfolioId"
      ],
      "type": "object"
    },
    "DisassociateProductFromPortfolioOutput": {
      "properties": {},
      "type": "object"
    },
    "DisassociateTagOptionFromResourceInput": {
      "properties": {
        "ResourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": "The resource identifier."
        },
        "TagOptionId": {
          "$ref": "#/definitions/TagOptionId",
          "description": "The TagOption identifier."
        }
      },
      "required": [
        "ResourceId",
        "TagOptionId"
      ],
      "type": "object"
    },
    "DisassociateTagOptionFromResourceOutput": {
      "properties": {},
      "type": "object"
    },
    "DuplicateResourceException": {
      "description": "The specified resource is a duplicate.",
      "properties": {},
      "type": "object"
    },
    "ErrorCode": {
      "type": "string"
    },
    "ErrorDescription": {
      "type": "string"
    },
    "EvaluationType": {
      "enum": [
        "STATIC",
        "DYNAMIC"
      ],
      "type": "string"
    },
    "ExecuteProvisionedProductPlanInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "PlanId": {
          "$ref": "#/definitions/Id",
          "description": "The plan identifier."
        }
      },
      "required": [
        "PlanId",
        "IdempotencyToken"
      ],
      "type": "object"
    },
    "ExecuteProvisionedProductPlanOutput": {
      "properties": {
        "RecordDetail": {
          "$ref": "#/definitions/RecordDetail",
          "description": "Information about the result of provisioning the product."
        }
      },
      "type": "object"
    },
    "HasDefaultPath": {
      "type": "boolean"
    },
    "Id": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "IdempotencyToken": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
      "type": "string"
    },
    "IgnoreErrors": {
      "type": "boolean"
    },
    "InstructionType": {
      "type": "string"
    },
    "InstructionValue": {
      "type": "string"
    },
    "InvalidParametersException": {
      "description": "One or more parameters provided to the operation are not valid.",
      "properties": {},
      "type": "object"
    },
    "InvalidStateException": {
      "description": "An attempt was made to modify a resource that is in a state that is not valid. Check your resources to ensure that they are in valid states before retrying the operation.",
      "properties": {},
      "type": "object"
    },
    "LastRequestId": {
      "type": "string"
    },
    "LaunchPathSummaries": {
      "items": {
        "$ref": "#/definitions/LaunchPathSummary"
      },
      "type": "array"
    },
    "LaunchPathSummary": {
      "description": "Summary information about a product path for a user.",
      "properties": {
        "ConstraintSummaries": {
          "$ref": "#/definitions/ConstraintSummaries",
          "description": "The constraints on the portfolio-product relationship."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the product path."
        },
        "Name": {
          "$ref": "#/definitions/PortfolioName",
          "description": "The name of the portfolio to which the user was assigned."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "The tags associated with this product path."
        }
      },
      "type": "object"
    },
    "LimitExceededException": {
      "description": "The current limits of the service would have been exceeded by this operation. Decrease your resource use or increase your service limits and retry the operation.",
      "properties": {},
      "type": "object"
    },
    "ListAcceptedPortfolioSharesInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "PortfolioShareType": {
          "$ref": "#/definitions/PortfolioShareType",
          "description": "<p>The type of shared portfolios to list. The default is to list imported portfolios.</p> <ul> <li> <p> <code>AWS_SERVICECATALOG</code> - List default portfolios</p> </li> <li> <p> <code>IMPORTED</code> - List imported portfolios</p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "ListAcceptedPortfolioSharesOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "PortfolioDetails": {
          "$ref": "#/definitions/PortfolioDetails",
          "description": "Information about the portfolios."
        }
      },
      "type": "object"
    },
    "ListConstraintsForPortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "PortfolioId"
      ],
      "type": "object"
    },
    "ListConstraintsForPortfolioOutput": {
      "properties": {
        "ConstraintDetails": {
          "$ref": "#/definitions/ConstraintDetails",
          "description": "Information about the constraints."
        },
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        }
      },
      "type": "object"
    },
    "ListLaunchPathsInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "ProductId"
      ],
      "type": "object"
    },
    "ListLaunchPathsOutput": {
      "properties": {
        "LaunchPathSummaries": {
          "$ref": "#/definitions/LaunchPathSummaries",
          "description": "Information about the launch path."
        },
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        }
      },
      "type": "object"
    },
    "ListPortfolioAccessInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "PortfolioId"
      ],
      "type": "object"
    },
    "ListPortfolioAccessOutput": {
      "properties": {
        "AccountIds": {
          "$ref": "#/definitions/AccountIds",
          "description": "Information about the AWS accounts with access to the portfolio."
        },
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        }
      },
      "type": "object"
    },
    "ListPortfoliosForProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "ProductId"
      ],
      "type": "object"
    },
    "ListPortfoliosForProductOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "PortfolioDetails": {
          "$ref": "#/definitions/PortfolioDetails",
          "description": "Information about the portfolios."
        }
      },
      "type": "object"
    },
    "ListPortfoliosInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        }
      },
      "type": "object"
    },
    "ListPortfoliosOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "PortfolioDetails": {
          "$ref": "#/definitions/PortfolioDetails",
          "description": "Information about the portfolios."
        }
      },
      "type": "object"
    },
    "ListPrincipalsForPortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "PortfolioId"
      ],
      "type": "object"
    },
    "ListPrincipalsForPortfolioOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "Principals": {
          "$ref": "#/definitions/Principals",
          "description": "The IAM principals (users or roles) associated with the portfolio."
        }
      },
      "type": "object"
    },
    "ListProvisionedProductPlansInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AccessLevelFilter": {
          "$ref": "#/definitions/AccessLevelFilter",
          "description": "The access level to use to obtain results. The default is <code>User</code>."
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "ProvisionProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "type": "object"
    },
    "ListProvisionedProductPlansOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "ProvisionedProductPlans": {
          "$ref": "#/definitions/ProvisionedProductPlans",
          "description": "Information about the plans."
        }
      },
      "type": "object"
    },
    "ListProvisioningArtifactsInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        }
      },
      "required": [
        "ProductId"
      ],
      "type": "object"
    },
    "ListProvisioningArtifactsOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "ProvisioningArtifactDetails": {
          "$ref": "#/definitions/ProvisioningArtifactDetails",
          "description": "Information about the provisioning artifacts."
        }
      },
      "type": "object"
    },
    "ListRecordHistoryInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AccessLevelFilter": {
          "$ref": "#/definitions/AccessLevelFilter",
          "description": "The access level to use to obtain results. The default is <code>User</code>."
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "SearchFilter": {
          "$ref": "#/definitions/ListRecordHistorySearchFilter",
          "description": "The search filter to scope the results."
        }
      },
      "type": "object"
    },
    "ListRecordHistoryOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "RecordDetails": {
          "$ref": "#/definitions/RecordDetails",
          "description": "The records, in reverse chronological order."
        }
      },
      "type": "object"
    },
    "ListRecordHistorySearchFilter": {
      "description": "The search filter to use when listing history records.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/SearchFilterKey",
          "description": "<p>The filter key.</p> <ul> <li> <p> <code>product</code> - Filter results based on the specified product identifier.</p> </li> <li> <p> <code>provisionedproduct</code> - Filter results based on the provisioned product identifier.</p> </li> </ul>"
        },
        "Value": {
          "$ref": "#/definitions/SearchFilterValue",
          "description": "The filter value."
        }
      },
      "type": "object"
    },
    "ListResourcesForTagOptionInput": {
      "properties": {
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "ResourceType": {
          "$ref": "#/definitions/ResourceType",
          "description": "<p>The resource type.</p> <ul> <li> <p> <code>Portfolio</code> </p> </li> <li> <p> <code>Product</code> </p> </li> </ul>"
        },
        "TagOptionId": {
          "$ref": "#/definitions/TagOptionId",
          "description": "The TagOption identifier."
        }
      },
      "required": [
        "TagOptionId"
      ],
      "type": "object"
    },
    "ListResourcesForTagOptionOutput": {
      "properties": {
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "ResourceDetails": {
          "$ref": "#/definitions/ResourceDetails",
          "description": "Information about the resources."
        }
      },
      "type": "object"
    },
    "ListTagOptionsFilters": {
      "description": "Filters to use when listing TagOptions.",
      "properties": {
        "Active": {
          "$ref": "#/definitions/TagOptionActive",
          "description": "The active state."
        },
        "Key": {
          "$ref": "#/definitions/TagOptionKey",
          "description": "The TagOption key."
        },
        "Value": {
          "$ref": "#/definitions/TagOptionValue",
          "description": "The TagOption value."
        }
      },
      "type": "object"
    },
    "ListTagOptionsInput": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/ListTagOptionsFilters",
          "description": "The search filters. If no search filters are specified, the output includes all TagOptions."
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        }
      },
      "type": "object"
    },
    "ListTagOptionsOutput": {
      "properties": {
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "TagOptionDetails": {
          "$ref": "#/definitions/TagOptionDetails",
          "description": "Information about the TagOptions."
        }
      },
      "type": "object"
    },
    "LogicalResourceId": {
      "type": "string"
    },
    "NoEcho": {
      "type": "boolean"
    },
    "NotificationArn": {
      "maxLength": 1224,
      "minLength": 1,
      "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
      "type": "string"
    },
    "NotificationArns": {
      "items": {
        "$ref": "#/definitions/NotificationArn"
      },
      "maxItems": 5,
      "type": "array"
    },
    "OutputKey": {
      "type": "string"
    },
    "OutputValue": {
      "type": "string"
    },
    "PageSize": {
      "maximum": 20,
      "minimum": 0,
      "type": "integer"
    },
    "PageToken": {
      "pattern": "[\\u0009\\u000a\\u000d\\u0020-\\uD7FF\\uE000-\\uFFFD]*",
      "type": "string"
    },
    "ParameterConstraints": {
      "description": "The constraints that the administrator has put on the parameter.",
      "properties": {
        "AllowedValues": {
          "$ref": "#/definitions/AllowedValues",
          "description": "The values that the administrator has allowed for the parameter."
        }
      },
      "type": "object"
    },
    "ParameterKey": {
      "maxLength": 1000,
      "minLength": 1,
      "type": "string"
    },
    "ParameterType": {
      "type": "string"
    },
    "ParameterValue": {
      "maxLength": 4096,
      "type": "string"
    },
    "PhysicalId": {
      "type": "string"
    },
    "PhysicalResourceId": {
      "type": "string"
    },
    "PlanResourceType": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "PortfolioDescription": {
      "maxLength": 2000,
      "type": "string"
    },
    "PortfolioDetail": {
      "description": "Information about a portfolio.",
      "properties": {
        "ARN": {
          "$ref": "#/definitions/ResourceARN",
          "description": "The ARN assigned to the portfolio."
        },
        "CreatedTime": {
          "$ref": "#/definitions/CreationTime",
          "description": "The UTC time stamp of the creation time."
        },
        "Description": {
          "$ref": "#/definitions/PortfolioDescription",
          "description": "The description of the portfolio."
        },
        "DisplayName": {
          "$ref": "#/definitions/PortfolioDisplayName",
          "description": "The name to use for display purposes."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "ProviderName": {
          "$ref": "#/definitions/ProviderName",
          "description": "The name of the portfolio provider."
        }
      },
      "type": "object"
    },
    "PortfolioDetails": {
      "items": {
        "$ref": "#/definitions/PortfolioDetail"
      },
      "type": "array"
    },
    "PortfolioDisplayName": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "PortfolioName": {
      "type": "string"
    },
    "PortfolioShareType": {
      "enum": [
        "IMPORTED",
        "AWS_SERVICECATALOG"
      ],
      "type": "string"
    },
    "Principal": {
      "description": "Information about a principal.",
      "properties": {
        "PrincipalARN": {
          "$ref": "#/definitions/PrincipalARN",
          "description": "The ARN of the principal (IAM user, role, or group)."
        },
        "PrincipalType": {
          "$ref": "#/definitions/PrincipalType",
          "description": "The principal type. The supported value is <code>IAM</code>."
        }
      },
      "type": "object"
    },
    "PrincipalARN": {
      "maxLength": 1000,
      "minLength": 1,
      "type": "string"
    },
    "PrincipalType": {
      "enum": [
        "IAM"
      ],
      "type": "string"
    },
    "Principals": {
      "items": {
        "$ref": "#/definitions/Principal"
      },
      "type": "array"
    },
    "ProductArn": {
      "maxLength": 1224,
      "minLength": 1,
      "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
      "type": "string"
    },
    "ProductSource": {
      "enum": [
        "ACCOUNT"
      ],
      "type": "string"
    },
    "ProductType": {
      "enum": [
        "CLOUD_FORMATION_TEMPLATE",
        "MARKETPLACE"
      ],
      "maxLength": 8191,
      "type": "string"
    },
    "ProductViewAggregationType": {
      "type": "string"
    },
    "ProductViewAggregationValue": {
      "description": "A single product view aggregation value/count pair, containing metadata about each product to which the calling user has access.",
      "properties": {
        "ApproximateCount": {
          "$ref": "#/definitions/ApproximateCount",
          "description": "An approximate count of the products that match the value."
        },
        "Value": {
          "$ref": "#/definitions/AttributeValue",
          "description": "The value of the product view aggregation."
        }
      },
      "type": "object"
    },
    "ProductViewAggregationValues": {
      "items": {
        "$ref": "#/definitions/ProductViewAggregationValue"
      },
      "type": "array"
    },
    "ProductViewAggregations": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ProductViewAggregationType"
          },
          "value": {
            "$ref": "#/definitions/ProductViewAggregationValues"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ProductViewDetail": {
      "description": "Information about a product view.",
      "properties": {
        "CreatedTime": {
          "$ref": "#/definitions/CreatedTime",
          "description": "The UTC time stamp of the creation time."
        },
        "ProductARN": {
          "$ref": "#/definitions/ResourceARN",
          "description": "The ARN of the product."
        },
        "ProductViewSummary": {
          "$ref": "#/definitions/ProductViewSummary",
          "description": "Summary information about the product view."
        },
        "Status": {
          "$ref": "#/definitions/Status",
          "description": "<p>The status of the product.</p> <ul> <li> <p> <code>AVAILABLE</code> - The product is ready for use.</p> </li> <li> <p> <code>CREATING</code> - Product creation has started; the product is not ready for use.</p> </li> <li> <p> <code>FAILED</code> - An action failed.</p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "ProductViewDetails": {
      "items": {
        "$ref": "#/definitions/ProductViewDetail"
      },
      "type": "array"
    },
    "ProductViewDistributor": {
      "type": "string"
    },
    "ProductViewFilterBy": {
      "enum": [
        "FullTextSearch",
        "Owner",
        "ProductType",
        "SourceProductId"
      ],
      "type": "string"
    },
    "ProductViewFilterValue": {
      "type": "string"
    },
    "ProductViewFilterValues": {
      "items": {
        "$ref": "#/definitions/ProductViewFilterValue"
      },
      "type": "array"
    },
    "ProductViewFilters": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ProductViewFilterBy"
          },
          "value": {
            "$ref": "#/definitions/ProductViewFilterValues"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ProductViewName": {
      "maxLength": 8191,
      "type": "string"
    },
    "ProductViewOwner": {
      "maxLength": 8191,
      "type": "string"
    },
    "ProductViewShortDescription": {
      "maxLength": 8191,
      "type": "string"
    },
    "ProductViewSortBy": {
      "enum": [
        "Title",
        "VersionCount",
        "CreationDate"
      ],
      "type": "string"
    },
    "ProductViewSummaries": {
      "items": {
        "$ref": "#/definitions/ProductViewSummary"
      },
      "type": "array"
    },
    "ProductViewSummary": {
      "description": "Summary information about a product view.",
      "properties": {
        "Distributor": {
          "$ref": "#/definitions/ProductViewDistributor",
          "description": "The distributor of the product. Contact the product administrator for the significance of this value."
        },
        "HasDefaultPath": {
          "$ref": "#/definitions/HasDefaultPath",
          "description": "Indicates whether the product has a default path. If the product does not have a default path, call <a>ListLaunchPaths</a> to disambiguate between paths. Otherwise, <a>ListLaunchPaths</a> is not required, and the output of <a>ProductViewSummary</a> can be used directly with <a>DescribeProvisioningParameters</a>."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The product view identifier."
        },
        "Name": {
          "$ref": "#/definitions/ProductViewName",
          "description": "The name of the product."
        },
        "Owner": {
          "$ref": "#/definitions/ProductViewOwner",
          "description": "The owner of the product. Contact the product administrator for the significance of this value."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ShortDescription": {
          "$ref": "#/definitions/ProductViewShortDescription",
          "description": "Short description of the product."
        },
        "SupportDescription": {
          "$ref": "#/definitions/SupportDescription",
          "description": "The description of the support for this Product."
        },
        "SupportEmail": {
          "$ref": "#/definitions/SupportEmail",
          "description": "The email contact information to obtain support for this Product."
        },
        "SupportUrl": {
          "$ref": "#/definitions/SupportUrl",
          "description": "The URL information to obtain support for this Product."
        },
        "Type": {
          "$ref": "#/definitions/ProductType",
          "description": "The product type. Contact the product administrator for the significance of this value. If this value is <code>MARKETPLACE</code>, the product was created by AWS Marketplace."
        }
      },
      "type": "object"
    },
    "PropertyName": {
      "type": "string"
    },
    "ProviderName": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "ProvisionProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "NotificationArns": {
          "$ref": "#/definitions/NotificationArns",
          "description": "Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events."
        },
        "PathId": {
          "$ref": "#/definitions/Id",
          "description": "The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <a>ListLaunchPaths</a>."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisionToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "An idempotency token that uniquely identifies the provisioning request."
        },
        "ProvisionedProductName": {
          "$ref": "#/definitions/ProvisionedProductName",
          "description": "A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "ProvisioningParameters": {
          "$ref": "#/definitions/ProvisioningParameters",
          "description": "Parameters specified by the administrator that are required for provisioning the product."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "One or more tags."
        }
      },
      "required": [
        "ProductId",
        "ProvisioningArtifactId",
        "ProvisionedProductName",
        "ProvisionToken"
      ],
      "type": "object"
    },
    "ProvisionProductOutput": {
      "properties": {
        "RecordDetail": {
          "$ref": "#/definitions/RecordDetail",
          "description": "Information about the result of provisioning the product."
        }
      },
      "type": "object"
    },
    "ProvisionedProductAttribute": {
      "description": "Information about a provisioned product.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/ProvisionedProductNameOrArn",
          "description": "The ARN of the provisioned product."
        },
        "CreatedTime": {
          "$ref": "#/definitions/CreatedTime",
          "description": "The UTC time stamp of the creation time."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioned product."
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "LastRecordId": {
          "$ref": "#/definitions/Id",
          "description": "The record identifier of the last request performed on this provisioned product."
        },
        "Name": {
          "$ref": "#/definitions/ProvisionedProductNameOrArn",
          "description": "The user-friendly name of the provisioned product."
        },
        "PhysicalId": {
          "$ref": "#/definitions/PhysicalId",
          "description": "The assigned identifier for the resource, such as an EC2 instance ID or an S3 bucket name."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "Status": {
          "$ref": "#/definitions/ProvisionedProductStatus",
          "description": "<p>The current status of the provisioned product.</p> <ul> <li> <p> <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p> </li> <li> <p> <code>UNDER_CHANGE</code> - Transitive state, operations performed might not have valid results. Wait for an <code>AVAILABLE</code> status before performing operations.</p> </li> <li> <p> <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p> </li> <li> <p> <code>ERROR</code> - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p> </li> </ul>"
        },
        "StatusMessage": {
          "$ref": "#/definitions/ProvisionedProductStatusMessage",
          "description": "The current status message of the provisioned product."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "One or more tags."
        },
        "Type": {
          "$ref": "#/definitions/ProvisionedProductType",
          "description": "The type of provisioned product. The supported value is <code>CFN_STACK</code>."
        },
        "UserArn": {
          "$ref": "#/definitions/UserArn",
          "description": "The Amazon Resource Name (ARN) of the IAM user."
        },
        "UserArnSession": {
          "$ref": "#/definitions/UserArnSession",
          "description": "The ARN of the IAM user in the session. This ARN might contain a session ID."
        }
      },
      "type": "object"
    },
    "ProvisionedProductAttributes": {
      "items": {
        "$ref": "#/definitions/ProvisionedProductAttribute"
      },
      "type": "array"
    },
    "ProvisionedProductDetail": {
      "description": "Information about a provisioned product.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/ProvisionedProductNameOrArn",
          "description": "The ARN of the provisioned product."
        },
        "CreatedTime": {
          "$ref": "#/definitions/CreatedTime",
          "description": "The UTC time stamp of the creation time."
        },
        "Id": {
          "$ref": "#/definitions/ProvisionedProductId",
          "description": "The identifier of the provisioned product."
        },
        "IdempotencyToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request."
        },
        "LastRecordId": {
          "$ref": "#/definitions/LastRequestId",
          "description": "The record identifier of the last request performed on this provisioned product."
        },
        "Name": {
          "$ref": "#/definitions/ProvisionedProductNameOrArn",
          "description": "The user-friendly name of the provisioned product."
        },
        "Status": {
          "$ref": "#/definitions/ProvisionedProductStatus",
          "description": "<p>The current status of the provisioned product.</p> <ul> <li> <p> <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p> </li> <li> <p> <code>UNDER_CHANGE</code> - Transitive state, operations performed might not have valid results. Wait for an <code>AVAILABLE</code> status before performing operations.</p> </li> <li> <p> <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p> </li> <li> <p> <code>ERROR</code> - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p> </li> </ul>"
        },
        "StatusMessage": {
          "$ref": "#/definitions/ProvisionedProductStatusMessage",
          "description": "The current status message of the provisioned product."
        },
        "Type": {
          "$ref": "#/definitions/ProvisionedProductType",
          "description": "The type of provisioned product. The supported value is <code>CFN_STACK</code>."
        }
      },
      "type": "object"
    },
    "ProvisionedProductDetails": {
      "items": {
        "$ref": "#/definitions/ProvisionedProductDetail"
      },
      "type": "array"
    },
    "ProvisionedProductFilters": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ProvisionedProductViewFilterBy"
          },
          "value": {
            "$ref": "#/definitions/ProvisionedProductViewFilterValues"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ProvisionedProductId": {
      "type": "string"
    },
    "ProvisionedProductName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9][a-zA-Z0-9._-]*",
      "type": "string"
    },
    "ProvisionedProductNameOrArn": {
      "maxLength": 1224,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9][a-zA-Z0-9._-]{0,127}|arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
      "type": "string"
    },
    "ProvisionedProductPlanDetails": {
      "description": "Information about a plan.",
      "properties": {
        "CreatedTime": {
          "$ref": "#/definitions/CreatedTime",
          "description": "The UTC time stamp of the creation time."
        },
        "NotificationArns": {
          "$ref": "#/definitions/NotificationArns",
          "description": "Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events."
        },
        "PathId": {
          "$ref": "#/definitions/Id",
          "description": "The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <a>ListLaunchPaths</a>."
        },
        "PlanId": {
          "$ref": "#/definitions/Id",
          "description": "The plan identifier."
        },
        "PlanName": {
          "$ref": "#/definitions/ProvisionedProductPlanName",
          "description": "The name of the plan."
        },
        "PlanType": {
          "$ref": "#/definitions/ProvisionedProductPlanType",
          "description": "The plan type."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisionProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisionProductName": {
          "$ref": "#/definitions/ProvisionedProductName",
          "description": "The user-friendly name of the provisioned product."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "ProvisioningParameters": {
          "$ref": "#/definitions/UpdateProvisioningParameters",
          "description": "Parameters specified by the administrator that are required for provisioning the product."
        },
        "Status": {
          "$ref": "#/definitions/ProvisionedProductPlanStatus",
          "description": "The status."
        },
        "StatusMessage": {
          "$ref": "#/definitions/StatusMessage",
          "description": "The status message."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "One or more tags."
        },
        "UpdatedTime": {
          "$ref": "#/definitions/UpdatedTime",
          "description": "The time when the plan was last updated."
        }
      },
      "type": "object"
    },
    "ProvisionedProductPlanName": {
      "type": "string"
    },
    "ProvisionedProductPlanStatus": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "CREATE_SUCCESS",
        "CREATE_FAILED",
        "EXECUTE_IN_PROGRESS",
        "EXECUTE_SUCCESS",
        "EXECUTE_FAILED"
      ],
      "type": "string"
    },
    "ProvisionedProductPlanSummary": {
      "description": "Summary information about a plan.",
      "properties": {
        "PlanId": {
          "$ref": "#/definitions/Id",
          "description": "The plan identifier."
        },
        "PlanName": {
          "$ref": "#/definitions/ProvisionedProductPlanName",
          "description": "The name of the plan."
        },
        "PlanType": {
          "$ref": "#/definitions/ProvisionedProductPlanType",
          "description": "The plan type."
        },
        "ProvisionProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisionProductName": {
          "$ref": "#/definitions/ProvisionedProductName",
          "description": "The user-friendly name of the provisioned product."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        }
      },
      "type": "object"
    },
    "ProvisionedProductPlanType": {
      "enum": [
        "CLOUDFORMATION"
      ],
      "type": "string"
    },
    "ProvisionedProductPlans": {
      "items": {
        "$ref": "#/definitions/ProvisionedProductPlanSummary"
      },
      "type": "array"
    },
    "ProvisionedProductStatus": {
      "enum": [
        "AVAILABLE",
        "UNDER_CHANGE",
        "TAINTED",
        "ERROR",
        "PLAN_IN_PROGRESS"
      ],
      "type": "string"
    },
    "ProvisionedProductStatusMessage": {
      "type": "string"
    },
    "ProvisionedProductType": {
      "type": "string"
    },
    "ProvisionedProductViewFilterBy": {
      "enum": [
        "SearchQuery"
      ],
      "type": "string"
    },
    "ProvisionedProductViewFilterValue": {
      "type": "string"
    },
    "ProvisionedProductViewFilterValues": {
      "items": {
        "$ref": "#/definitions/ProvisionedProductViewFilterValue"
      },
      "type": "array"
    },
    "ProvisioningArtifact": {
      "description": "Information about a provisioning artifact. A provisioning artifact is also known as a product version.",
      "properties": {
        "CreatedTime": {
          "$ref": "#/definitions/ProvisioningArtifactCreatedTime",
          "description": "The UTC time stamp of the creation time."
        },
        "Description": {
          "$ref": "#/definitions/ProvisioningArtifactDescription",
          "description": "The description of the provisioning artifact."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "Name": {
          "$ref": "#/definitions/ProvisioningArtifactName",
          "description": "The name of the provisioning artifact."
        }
      },
      "type": "object"
    },
    "ProvisioningArtifactActive": {
      "type": "boolean"
    },
    "ProvisioningArtifactCreatedTime": {
      "format": "date-time",
      "type": "string"
    },
    "ProvisioningArtifactDescription": {
      "type": "string"
    },
    "ProvisioningArtifactDetail": {
      "description": "Information about a provisioning artifact (also known as a version) for a product.",
      "properties": {
        "Active": {
          "$ref": "#/definitions/ProvisioningArtifactActive",
          "description": "Indicates whether the product version is active."
        },
        "CreatedTime": {
          "$ref": "#/definitions/CreationTime",
          "description": "The UTC time stamp of the creation time."
        },
        "Description": {
          "$ref": "#/definitions/ProvisioningArtifactName",
          "description": "The description of the provisioning artifact."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "Name": {
          "$ref": "#/definitions/ProvisioningArtifactName",
          "description": "The name of the provisioning artifact."
        },
        "Type": {
          "$ref": "#/definitions/ProvisioningArtifactType",
          "description": "<p>The type of provisioning artifact.</p> <ul> <li> <p> <code>CLOUD_FORMATION_TEMPLATE</code> - AWS CloudFormation template</p> </li> <li> <p> <code>MARKETPLACE_AMI</code> - AWS Marketplace AMI</p> </li> <li> <p> <code>MARKETPLACE_CAR</code> - AWS Marketplace Clusters and AWS Resources</p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "ProvisioningArtifactDetails": {
      "items": {
        "$ref": "#/definitions/ProvisioningArtifactDetail"
      },
      "type": "array"
    },
    "ProvisioningArtifactInfo": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ProvisioningArtifactInfoKey"
          },
          "value": {
            "$ref": "#/definitions/ProvisioningArtifactInfoValue"
          }
        },
        "type": "object"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "ProvisioningArtifactInfoKey": {
      "type": "string"
    },
    "ProvisioningArtifactInfoValue": {
      "type": "string"
    },
    "ProvisioningArtifactName": {
      "type": "string"
    },
    "ProvisioningArtifactParameter": {
      "description": "Information about a parameter used to provision a product.",
      "properties": {
        "DefaultValue": {
          "$ref": "#/definitions/DefaultValue",
          "description": "The default value."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the parameter."
        },
        "IsNoEcho": {
          "$ref": "#/definitions/NoEcho",
          "description": "If this value is true, the value for this parameter is obfuscated from view when the parameter is retrieved. This parameter is used to hide sensitive information."
        },
        "ParameterConstraints": {
          "$ref": "#/definitions/ParameterConstraints",
          "description": "Constraints that the administrator has put on a parameter."
        },
        "ParameterKey": {
          "$ref": "#/definitions/ParameterKey",
          "description": "The parameter key."
        },
        "ParameterType": {
          "$ref": "#/definitions/ParameterType",
          "description": "The parameter type."
        }
      },
      "type": "object"
    },
    "ProvisioningArtifactParameters": {
      "items": {
        "$ref": "#/definitions/ProvisioningArtifactParameter"
      },
      "type": "array"
    },
    "ProvisioningArtifactProperties": {
      "description": "Information about a provisioning artifact (also known as a version) for a product.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/ProvisioningArtifactDescription",
          "description": "The description of the provisioning artifact, including how it differs from the previous provisioning artifact."
        },
        "Info": {
          "$ref": "#/definitions/ProvisioningArtifactInfo",
          "description": "<p>The URL of the CloudFormation template in Amazon S3. Specify the URL in JSON format as follows:</p> <p> <code>\"LoadTemplateFromURL\": \"https://s3.amazonaws.com/cf-templates-ozkq9d3hgiq2-us-east-1/...\"</code> </p>"
        },
        "Name": {
          "$ref": "#/definitions/ProvisioningArtifactName",
          "description": "The name of the provisioning artifact (for example, v1 v2beta). No spaces are allowed."
        },
        "Type": {
          "$ref": "#/definitions/ProvisioningArtifactType",
          "description": "<p>The type of provisioning artifact.</p> <ul> <li> <p> <code>CLOUD_FORMATION_TEMPLATE</code> - AWS CloudFormation template</p> </li> <li> <p> <code>MARKETPLACE_AMI</code> - AWS Marketplace AMI</p> </li> <li> <p> <code>MARKETPLACE_CAR</code> - AWS Marketplace Clusters and AWS Resources</p> </li> </ul>"
        }
      },
      "required": [
        "Info"
      ],
      "type": "object"
    },
    "ProvisioningArtifactPropertyName": {
      "enum": [
        "Id"
      ],
      "type": "string"
    },
    "ProvisioningArtifactPropertyValue": {
      "type": "string"
    },
    "ProvisioningArtifactSummaries": {
      "items": {
        "$ref": "#/definitions/ProvisioningArtifactSummary"
      },
      "type": "array"
    },
    "ProvisioningArtifactSummary": {
      "description": "Summary information about a provisioning artifact (also known as a version) for a product.",
      "properties": {
        "CreatedTime": {
          "$ref": "#/definitions/ProvisioningArtifactCreatedTime",
          "description": "The UTC time stamp of the creation time."
        },
        "Description": {
          "$ref": "#/definitions/ProvisioningArtifactDescription",
          "description": "The description of the provisioning artifact."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "Name": {
          "$ref": "#/definitions/ProvisioningArtifactName",
          "description": "The name of the provisioning artifact."
        },
        "ProvisioningArtifactMetadata": {
          "$ref": "#/definitions/ProvisioningArtifactInfo",
          "description": "The metadata for the provisioning artifact. This is used with AWS Marketplace products."
        }
      },
      "type": "object"
    },
    "ProvisioningArtifactType": {
      "enum": [
        "CLOUD_FORMATION_TEMPLATE",
        "MARKETPLACE_AMI",
        "MARKETPLACE_CAR"
      ],
      "type": "string"
    },
    "ProvisioningArtifacts": {
      "items": {
        "$ref": "#/definitions/ProvisioningArtifact"
      },
      "type": "array"
    },
    "ProvisioningParameter": {
      "description": "Information about a parameter used to provision a product.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/ParameterKey",
          "description": "The parameter key."
        },
        "Value": {
          "$ref": "#/definitions/ParameterValue",
          "description": "The parameter value."
        }
      },
      "type": "object"
    },
    "ProvisioningParameters": {
      "items": {
        "$ref": "#/definitions/ProvisioningParameter"
      },
      "type": "array"
    },
    "RecordDetail": {
      "description": "Information about a request operation.",
      "properties": {
        "CreatedTime": {
          "$ref": "#/definitions/CreatedTime",
          "description": "The UTC time stamp of the creation time."
        },
        "PathId": {
          "$ref": "#/definitions/Id",
          "description": "The path identifier."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisionedProductId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioned product."
        },
        "ProvisionedProductName": {
          "$ref": "#/definitions/ProvisionedProductName",
          "description": "The user-friendly name of the provisioned product."
        },
        "ProvisionedProductType": {
          "$ref": "#/definitions/ProvisionedProductType",
          "description": "The type of provisioned product. The supported value is <code>CFN_STACK</code>."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "RecordErrors": {
          "$ref": "#/definitions/RecordErrors",
          "description": "The errors that occurred."
        },
        "RecordId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the record."
        },
        "RecordTags": {
          "$ref": "#/definitions/RecordTags",
          "description": "One or more tags."
        },
        "RecordType": {
          "$ref": "#/definitions/RecordType",
          "description": "<p>The record type.</p> <ul> <li> <p> <code>PROVISION_PRODUCT</code> </p> </li> <li> <p> <code>UPDATE_PROVISIONED_PRODUCT</code> </p> </li> <li> <p> <code>TERMINATE_PROVISIONED_PRODUCT</code> </p> </li> </ul>"
        },
        "Status": {
          "$ref": "#/definitions/RecordStatus",
          "description": "<p>The status of the provisioned product.</p> <ul> <li> <p> <code>CREATED</code> - The request was created but the operation has not started.</p> </li> <li> <p> <code>IN_PROGRESS</code> - The requested operation is in progress.</p> </li> <li> <p> <code>IN_PROGRESS_IN_ERROR</code> - The provisioned product is under change but the requested operation failed and some remediation is occurring. For example, a rollback.</p> </li> <li> <p> <code>SUCCEEDED</code> - The requested operation has successfully completed.</p> </li> <li> <p> <code>FAILED</code> - The requested operation has unsuccessfully completed. Investigate using the error messages returned.</p> </li> </ul>"
        },
        "UpdatedTime": {
          "$ref": "#/definitions/UpdatedTime",
          "description": "The time when the record was last updated."
        }
      },
      "type": "object"
    },
    "RecordDetails": {
      "items": {
        "$ref": "#/definitions/RecordDetail"
      },
      "type": "array"
    },
    "RecordError": {
      "description": "The error code and description resulting from an operation.",
      "properties": {
        "Code": {
          "$ref": "#/definitions/ErrorCode",
          "description": "The numeric value of the error."
        },
        "Description": {
          "$ref": "#/definitions/ErrorDescription",
          "description": "The description of the error."
        }
      },
      "type": "object"
    },
    "RecordErrors": {
      "items": {
        "$ref": "#/definitions/RecordError"
      },
      "type": "array"
    },
    "RecordOutput": {
      "description": "The output for the product created as the result of a request. For example, the output for a CloudFormation-backed product that creates an S3 bucket would include the S3 bucket URL.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the output."
        },
        "OutputKey": {
          "$ref": "#/definitions/OutputKey",
          "description": "The output key."
        },
        "OutputValue": {
          "$ref": "#/definitions/OutputValue",
          "description": "The output value."
        }
      },
      "type": "object"
    },
    "RecordOutputs": {
      "items": {
        "$ref": "#/definitions/RecordOutput"
      },
      "type": "array"
    },
    "RecordStatus": {
      "enum": [
        "CREATED",
        "IN_PROGRESS",
        "IN_PROGRESS_IN_ERROR",
        "SUCCEEDED",
        "FAILED"
      ],
      "type": "string"
    },
    "RecordTag": {
      "description": "Information about a tag, which is a key-value pair.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/RecordTagKey",
          "description": "The key for this tag."
        },
        "Value": {
          "$ref": "#/definitions/RecordTagValue",
          "description": "The value for this tag."
        }
      },
      "type": "object"
    },
    "RecordTagKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
      "type": "string"
    },
    "RecordTagValue": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
      "type": "string"
    },
    "RecordTags": {
      "items": {
        "$ref": "#/definitions/RecordTag"
      },
      "maxItems": 50,
      "type": "array"
    },
    "RecordType": {
      "type": "string"
    },
    "RejectPortfolioShareInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        }
      },
      "required": [
        "PortfolioId"
      ],
      "type": "object"
    },
    "RejectPortfolioShareOutput": {
      "properties": {},
      "type": "object"
    },
    "Replacement": {
      "enum": [
        "TRUE",
        "FALSE",
        "CONDITIONAL"
      ],
      "type": "string"
    },
    "RequiresRecreation": {
      "enum": [
        "NEVER",
        "CONDITIONALLY",
        "ALWAYS"
      ],
      "type": "string"
    },
    "ResourceARN": {
      "maxLength": 150,
      "minLength": 1,
      "type": "string"
    },
    "ResourceAttribute": {
      "enum": [
        "PROPERTIES",
        "METADATA",
        "CREATIONPOLICY",
        "UPDATEPOLICY",
        "DELETIONPOLICY",
        "TAGS"
      ],
      "type": "string"
    },
    "ResourceChange": {
      "description": "Information about a resource change that will occur when a plan is executed.",
      "properties": {
        "Action": {
          "$ref": "#/definitions/ChangeAction",
          "description": "The change action."
        },
        "Details": {
          "$ref": "#/definitions/ResourceChangeDetails",
          "description": "Information about the resource changes."
        },
        "LogicalResourceId": {
          "$ref": "#/definitions/LogicalResourceId",
          "description": "The ID of the resource, as defined in the CloudFormation template."
        },
        "PhysicalResourceId": {
          "$ref": "#/definitions/PhysicalResourceId",
          "description": "The ID of the resource, if it was already created."
        },
        "Replacement": {
          "$ref": "#/definitions/Replacement",
          "description": "If the change type is <code>Modify</code>, indicates whether the existing resource is deleted and replaced with a new one."
        },
        "ResourceType": {
          "$ref": "#/definitions/PlanResourceType",
          "description": "The type of resource."
        },
        "Scope": {
          "$ref": "#/definitions/Scope",
          "description": "The change scope."
        }
      },
      "type": "object"
    },
    "ResourceChangeDetail": {
      "description": "Information about a change to a resource attribute.",
      "properties": {
        "CausingEntity": {
          "$ref": "#/definitions/CausingEntity",
          "description": "The ID of the entity that caused the change."
        },
        "Evaluation": {
          "$ref": "#/definitions/EvaluationType",
          "description": "For static evaluations, the value of the resource attribute will change and the new value is known. For dynamic evaluations, the value might change, and any new value will be determined when the plan is updated."
        },
        "Target": {
          "$ref": "#/definitions/ResourceTargetDefinition",
          "description": "Information about the resource attribute to be modified."
        }
      },
      "type": "object"
    },
    "ResourceChangeDetails": {
      "items": {
        "$ref": "#/definitions/ResourceChangeDetail"
      },
      "type": "array"
    },
    "ResourceChanges": {
      "items": {
        "$ref": "#/definitions/ResourceChange"
      },
      "type": "array"
    },
    "ResourceDetail": {
      "description": "Information about a resource.",
      "properties": {
        "ARN": {
          "$ref": "#/definitions/ResourceDetailARN",
          "description": "The ARN of the resource."
        },
        "CreatedTime": {
          "$ref": "#/definitions/ResourceDetailCreatedTime",
          "description": "The creation time of the resource."
        },
        "Description": {
          "$ref": "#/definitions/ResourceDetailDescription",
          "description": "The description of the resource."
        },
        "Id": {
          "$ref": "#/definitions/ResourceDetailId",
          "description": "The identifier of the resource."
        },
        "Name": {
          "$ref": "#/definitions/ResourceDetailName",
          "description": "The name of the resource."
        }
      },
      "type": "object"
    },
    "ResourceDetailARN": {
      "type": "string"
    },
    "ResourceDetailCreatedTime": {
      "format": "date-time",
      "type": "string"
    },
    "ResourceDetailDescription": {
      "type": "string"
    },
    "ResourceDetailId": {
      "type": "string"
    },
    "ResourceDetailName": {
      "type": "string"
    },
    "ResourceDetails": {
      "items": {
        "$ref": "#/definitions/ResourceDetail"
      },
      "type": "array"
    },
    "ResourceId": {
      "type": "string"
    },
    "ResourceInUseException": {
      "description": "A resource that is currently in use. Ensure that the resource is not in use and retry the operation.",
      "properties": {},
      "type": "object"
    },
    "ResourceNotFoundException": {
      "description": "The specified resource was not found.",
      "properties": {},
      "type": "object"
    },
    "ResourceTargetDefinition": {
      "description": "Information about a change to a resource attribute.",
      "properties": {
        "Attribute": {
          "$ref": "#/definitions/ResourceAttribute",
          "description": "The attribute to be changed."
        },
        "Name": {
          "$ref": "#/definitions/PropertyName",
          "description": "If the attribute is <code>Properties</code>, the value is the name of the property. Otherwise, the value is null."
        },
        "RequiresRecreation": {
          "$ref": "#/definitions/RequiresRecreation",
          "description": "If the attribute is <code>Properties</code>, indicates whether a change to this property causes the resource to be re-created."
        }
      },
      "type": "object"
    },
    "ResourceType": {
      "type": "string"
    },
    "ScanProvisionedProductsInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AccessLevelFilter": {
          "$ref": "#/definitions/AccessLevelFilter",
          "description": "The access level to use to obtain results. The default is <code>User</code>."
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        }
      },
      "type": "object"
    },
    "ScanProvisionedProductsOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "ProvisionedProducts": {
          "$ref": "#/definitions/ProvisionedProductDetails",
          "description": "Information about the provisioned products."
        }
      },
      "type": "object"
    },
    "Scope": {
      "items": {
        "$ref": "#/definitions/ResourceAttribute"
      },
      "type": "array"
    },
    "SearchFilterKey": {
      "type": "string"
    },
    "SearchFilterValue": {
      "type": "string"
    },
    "SearchProductsAsAdminInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Filters": {
          "$ref": "#/definitions/ProductViewFilters",
          "description": "The search filters. If no search filters are specified, the output includes all products to which the administrator has access."
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "PortfolioId": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "ProductSource": {
          "$ref": "#/definitions/ProductSource",
          "description": "Access level of the source of the product."
        },
        "SortBy": {
          "$ref": "#/definitions/ProductViewSortBy",
          "description": "The sort field. If no value is specified, the results are not sorted."
        },
        "SortOrder": {
          "$ref": "#/definitions/SortOrder",
          "description": "The sort order. If no value is specified, the results are not sorted."
        }
      },
      "type": "object"
    },
    "SearchProductsAsAdminOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "ProductViewDetails": {
          "$ref": "#/definitions/ProductViewDetails",
          "description": "Information about the product views."
        }
      },
      "type": "object"
    },
    "SearchProductsInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Filters": {
          "$ref": "#/definitions/ProductViewFilters",
          "description": "The search filters. If no search filters are specified, the output includes all products to which the caller has access."
        },
        "PageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "SortBy": {
          "$ref": "#/definitions/ProductViewSortBy",
          "description": "The sort field. If no value is specified, the results are not sorted."
        },
        "SortOrder": {
          "$ref": "#/definitions/SortOrder",
          "description": "The sort order. If no value is specified, the results are not sorted."
        }
      },
      "type": "object"
    },
    "SearchProductsOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "ProductViewAggregations": {
          "$ref": "#/definitions/ProductViewAggregations",
          "description": "The product view aggregations."
        },
        "ProductViewSummaries": {
          "$ref": "#/definitions/ProductViewSummaries",
          "description": "Information about the product views."
        }
      },
      "type": "object"
    },
    "SearchProvisionedProductsInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AccessLevelFilter": {
          "$ref": "#/definitions/AccessLevelFilter",
          "description": "The access level to use to obtain results. The default is <code>User</code>."
        },
        "Filters": {
          "$ref": "#/definitions/ProvisionedProductFilters",
          "description": "<p>The search filters.</p> <p>When the key is <code>SearchQuery</code>, the searchable fields are <code>arn</code>, <code>createdTime</code>, <code>id</code>, <code>lastRecordId</code>, <code>idempotencyToken</code>, <code>name</code>, <code>physicalId</code>, <code>productId</code>, <code>provisioningArtifact</code>, <code>type</code>, <code>status</code>, <code>tags</code>, <code>userArn</code>, and <code>userArnSession</code>.</p> <p>Example: <code>\"SearchQuery\":[\"status:AVAILABLE\"]</code> </p>"
        },
        "PageSize": {
          "$ref": "#/definitions/SearchProvisionedProductsPageSize",
          "description": "The maximum number of items to return with this call."
        },
        "PageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token for the next set of results. To retrieve the first set of results, use null."
        },
        "SortBy": {
          "$ref": "#/definitions/SortField",
          "description": "The sort field. If no value is specified, the results are not sorted. The valid values are <code>arn</code>, <code>id</code>, <code>name</code>, and <code>lastRecordId</code>."
        },
        "SortOrder": {
          "$ref": "#/definitions/SortOrder",
          "description": "The sort order. If no value is specified, the results are not sorted."
        }
      },
      "type": "object"
    },
    "SearchProvisionedProductsOutput": {
      "properties": {
        "NextPageToken": {
          "$ref": "#/definitions/PageToken",
          "description": "The page token to use to retrieve the next set of results. If there are no additional results, this value is null."
        },
        "ProvisionedProducts": {
          "$ref": "#/definitions/ProvisionedProductAttributes",
          "description": "Information about the provisioned products."
        },
        "TotalResultsCount": {
          "$ref": "#/definitions/TotalResultsCount",
          "description": "The number of provisioned products found."
        }
      },
      "type": "object"
    },
    "SearchProvisionedProductsPageSize": {
      "maximum": 100,
      "minimum": 0,
      "type": "integer"
    },
    "SortField": {
      "type": "string"
    },
    "SortOrder": {
      "enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "type": "string"
    },
    "SourceProvisioningArtifactProperties": {
      "items": {
        "$ref": "#/definitions/SourceProvisioningArtifactPropertiesMap"
      },
      "type": "array"
    },
    "SourceProvisioningArtifactPropertiesMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ProvisioningArtifactPropertyName"
          },
          "value": {
            "$ref": "#/definitions/ProvisioningArtifactPropertyValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "Status": {
      "enum": [
        "AVAILABLE",
        "CREATING",
        "FAILED"
      ],
      "type": "string"
    },
    "StatusDetail": {
      "type": "string"
    },
    "StatusMessage": {
      "pattern": "[\\u0009\\u000a\\u000d\\u0020-\\uD7FF\\uE000-\\uFFFD]*",
      "type": "string"
    },
    "SupportDescription": {
      "maxLength": 8191,
      "type": "string"
    },
    "SupportEmail": {
      "maxLength": 254,
      "type": "string"
    },
    "SupportUrl": {
      "maxLength": 2083,
      "type": "string"
    },
    "Tag": {
      "description": "Information about a tag. A tag is a key-value pair. Tags are propagated to the resources created when provisioning a product.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/TagKey",
          "description": "The tag key."
        },
        "Value": {
          "$ref": "#/definitions/TagValue",
          "description": "The value for this key."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "TagKeys": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagOptionActive": {
      "type": "boolean"
    },
    "TagOptionDetail": {
      "description": "Information about a TagOption.",
      "properties": {
        "Active": {
          "$ref": "#/definitions/TagOptionActive",
          "description": "The TagOption active state."
        },
        "Id": {
          "$ref": "#/definitions/TagOptionId",
          "description": "The TagOption identifier."
        },
        "Key": {
          "$ref": "#/definitions/TagOptionKey",
          "description": "The TagOption key."
        },
        "Value": {
          "$ref": "#/definitions/TagOptionValue",
          "description": "The TagOption value."
        }
      },
      "type": "object"
    },
    "TagOptionDetails": {
      "items": {
        "$ref": "#/definitions/TagOptionDetail"
      },
      "type": "array"
    },
    "TagOptionId": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "TagOptionKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "TagOptionNotMigratedException": {
      "description": "An operation requiring TagOptions failed because the TagOptions migration process has not been performed for this account. Please use the AWS console to perform the migration process before retrying the operation.",
      "properties": {},
      "type": "object"
    },
    "TagOptionSummaries": {
      "items": {
        "$ref": "#/definitions/TagOptionSummary"
      },
      "type": "array"
    },
    "TagOptionSummary": {
      "description": "Summary information about a TagOption.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/TagOptionKey",
          "description": "The TagOption key."
        },
        "Values": {
          "$ref": "#/definitions/TagOptionValues",
          "description": "The TagOption value."
        }
      },
      "type": "object"
    },
    "TagOptionValue": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "TagOptionValues": {
      "items": {
        "$ref": "#/definitions/TagOptionValue"
      },
      "type": "array"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "Tags": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "maxItems": 50,
      "type": "array"
    },
    "TerminateProvisionedProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "IgnoreErrors": {
          "$ref": "#/definitions/IgnoreErrors",
          "description": "If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources."
        },
        "ProvisionedProductId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>."
        },
        "ProvisionedProductName": {
          "$ref": "#/definitions/ProvisionedProductNameOrArn",
          "description": "The name of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>."
        },
        "TerminateToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the provisioned product is terminated, subsequent requests to terminate the same provisioned product always return <b>ResourceNotFound</b>."
        }
      },
      "required": [
        "TerminateToken"
      ],
      "type": "object"
    },
    "TerminateProvisionedProductOutput": {
      "properties": {
        "RecordDetail": {
          "$ref": "#/definitions/RecordDetail",
          "description": "Information about the result of this request."
        }
      },
      "type": "object"
    },
    "TotalResultsCount": {
      "type": "integer"
    },
    "UpdateConstraintInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Description": {
          "$ref": "#/definitions/ConstraintDescription",
          "description": "The updated description of the constraint."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the constraint."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "UpdateConstraintOutput": {
      "properties": {
        "ConstraintDetail": {
          "$ref": "#/definitions/ConstraintDetail",
          "description": "Information about the constraint."
        },
        "ConstraintParameters": {
          "$ref": "#/definitions/ConstraintParameters",
          "description": "The constraint parameters."
        },
        "Status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the current request."
        }
      },
      "type": "object"
    },
    "UpdatePortfolioInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AddTags": {
          "$ref": "#/definitions/AddTags",
          "description": "The tags to add."
        },
        "Description": {
          "$ref": "#/definitions/PortfolioDescription",
          "description": "The updated description of the portfolio."
        },
        "DisplayName": {
          "$ref": "#/definitions/PortfolioDisplayName",
          "description": "The name to use for display purposes."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The portfolio identifier."
        },
        "ProviderName": {
          "$ref": "#/definitions/ProviderName",
          "description": "The updated name of the portfolio provider."
        },
        "RemoveTags": {
          "$ref": "#/definitions/TagKeys",
          "description": "The tags to remove."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "UpdatePortfolioOutput": {
      "properties": {
        "PortfolioDetail": {
          "$ref": "#/definitions/PortfolioDetail",
          "description": "Information about the portfolio."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "Information about the tags associated with the portfolio."
        }
      },
      "type": "object"
    },
    "UpdateProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "AddTags": {
          "$ref": "#/definitions/AddTags",
          "description": "The tags to add to the product."
        },
        "Description": {
          "$ref": "#/definitions/ProductViewShortDescription",
          "description": "The updated description of the product."
        },
        "Distributor": {
          "$ref": "#/definitions/ProductViewOwner",
          "description": "The updated distributor of the product."
        },
        "Id": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "Name": {
          "$ref": "#/definitions/ProductViewName",
          "description": "The updated product name."
        },
        "Owner": {
          "$ref": "#/definitions/ProductViewOwner",
          "description": "The updated owner of the product."
        },
        "RemoveTags": {
          "$ref": "#/definitions/TagKeys",
          "description": "The tags to remove from the product."
        },
        "SupportDescription": {
          "$ref": "#/definitions/SupportDescription",
          "description": "The updated support description for the product."
        },
        "SupportEmail": {
          "$ref": "#/definitions/SupportEmail",
          "description": "The updated support email for the product."
        },
        "SupportUrl": {
          "$ref": "#/definitions/SupportUrl",
          "description": "The updated support URL for the product."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "UpdateProductOutput": {
      "properties": {
        "ProductViewDetail": {
          "$ref": "#/definitions/ProductViewDetail",
          "description": "Information about the product view."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "Information about the tags associated with the product."
        }
      },
      "type": "object"
    },
    "UpdateProvisionedProductInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "PathId": {
          "$ref": "#/definitions/Id",
          "description": "The new path identifier. This value is optional if the product has a default path, and required if the product has more than one path."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioned product."
        },
        "ProvisionedProductId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>."
        },
        "ProvisionedProductName": {
          "$ref": "#/definitions/ProvisionedProductNameOrArn",
          "description": "The updated name of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        },
        "ProvisioningParameters": {
          "$ref": "#/definitions/UpdateProvisioningParameters",
          "description": "The new parameters."
        },
        "UpdateToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "The idempotency token that uniquely identifies the provisioning update request."
        }
      },
      "required": [
        "UpdateToken"
      ],
      "type": "object"
    },
    "UpdateProvisionedProductOutput": {
      "properties": {
        "RecordDetail": {
          "$ref": "#/definitions/RecordDetail",
          "description": "Information about the result of the request."
        }
      },
      "type": "object"
    },
    "UpdateProvisioningArtifactInput": {
      "properties": {
        "AcceptLanguage": {
          "$ref": "#/definitions/AcceptLanguage",
          "description": "<p>The language code.</p> <ul> <li> <p> <code>en</code> - English (default)</p> </li> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
        },
        "Active": {
          "$ref": "#/definitions/ProvisioningArtifactActive",
          "description": "Indicates whether the product version is active."
        },
        "Description": {
          "$ref": "#/definitions/ProvisioningArtifactDescription",
          "description": "The updated description of the provisioning artifact."
        },
        "Name": {
          "$ref": "#/definitions/ProvisioningArtifactName",
          "description": "The updated name of the provisioning artifact."
        },
        "ProductId": {
          "$ref": "#/definitions/Id",
          "description": "The product identifier."
        },
        "ProvisioningArtifactId": {
          "$ref": "#/definitions/Id",
          "description": "The identifier of the provisioning artifact."
        }
      },
      "required": [
        "ProductId",
        "ProvisioningArtifactId"
      ],
      "type": "object"
    },
    "UpdateProvisioningArtifactOutput": {
      "properties": {
        "Info": {
          "$ref": "#/definitions/ProvisioningArtifactInfo",
          "description": "The URL of the CloudFormation template in Amazon S3."
        },
        "ProvisioningArtifactDetail": {
          "$ref": "#/definitions/ProvisioningArtifactDetail",
          "description": "Information about the provisioning artifact."
        },
        "Status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the current request."
        }
      },
      "type": "object"
    },
    "UpdateProvisioningParameter": {
      "description": "The parameter key-value pair used to update a provisioned product.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/ParameterKey",
          "description": "The parameter key."
        },
        "UsePreviousValue": {
          "$ref": "#/definitions/UsePreviousValue",
          "description": "If set to true, <code>Value</code> is ignored and the previous parameter value is kept."
        },
        "Value": {
          "$ref": "#/definitions/ParameterValue",
          "description": "The parameter value."
        }
      },
      "type": "object"
    },
    "UpdateProvisioningParameters": {
      "items": {
        "$ref": "#/definitions/UpdateProvisioningParameter"
      },
      "type": "array"
    },
    "UpdateTagOptionInput": {
      "properties": {
        "Active": {
          "$ref": "#/definitions/TagOptionActive",
          "description": "The updated active state."
        },
        "Id": {
          "$ref": "#/definitions/TagOptionId",
          "description": "The TagOption identifier."
        },
        "Value": {
          "$ref": "#/definitions/TagOptionValue",
          "description": "The updated value."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "UpdateTagOptionOutput": {
      "properties": {
        "TagOptionDetail": {
          "$ref": "#/definitions/TagOptionDetail",
          "description": "Information about the TagOption."
        }
      },
      "type": "object"
    },
    "UpdatedTime": {
      "format": "date-time",
      "type": "string"
    },
    "UsageInstruction": {
      "description": "Additional information provided by the administrator.",
      "properties": {
        "Type": {
          "$ref": "#/definitions/InstructionType",
          "description": "The usage instruction type for the value."
        },
        "Value": {
          "$ref": "#/definitions/InstructionValue",
          "description": "The usage instruction value for this type."
        }
      },
      "type": "object"
    },
    "UsageInstructions": {
      "items": {
        "$ref": "#/definitions/UsageInstruction"
      },
      "type": "array"
    },
    "UsePreviousValue": {
      "type": "boolean"
    },
    "UserArn": {
      "type": "string"
    },
    "UserArnSession": {
      "type": "string"
    },
    "Verbose": {
      "type": "boolean"
    }
  }
}
